<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of DobuDish                                           -->

<!-- DobuDish is free software; you can redistribute it and/or modify        -->
<!-- it under the terms of the GNU General Public License as published by    -->
<!-- the Free Software Foundation; either version 2 of the License, or       -->
<!-- (at your option) any later version.                                     -->

<!-- DobuDish is distributed in the hope that it will be useful,             -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of          -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           -->
<!-- GNU General Public License for more details.                            -->

<!-- You should have received a copy of the GNU General Public License       -->
<!-- along with DobuDish; if not, write to the Free Software                 -->
<!-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
  [
    <!ENTITY % global.entities SYSTEM "../../../system/custom-xsl/global-entities.xml">
    %global.entities;

    <!ENTITY % entities SYSTEM "../custom-cfg/local-entities.xml">
    %entities;
  ]
>

<book lang="en">

  <bookinfo>

   <title>EDACC</title>
    <pubdate>2010</pubdate>
<!--
    <copyright>
      <year>2010</year>
      <holder>Das super EDACC-Team</holder>
    </copyright>
-->
  </bookinfo>

<chapter>
  <title>Getting started</title>

  <!-- First section for the systemrequriements -->
  <section>
    <title>Systemrequirements</title>

    <para>
		To start EDACC you need the JRE version 6. <!-- oder niedriger? oder hoeher? -->
		Additional you need a connection to a SQL-database (DB), where you have read and write access. 
		The DB should be reachable from the grid (computer) where the client will run.
		
		
    </para>
	
  </section>
  
  <!-- Second section -->
  <section>
    <title>How to start</title>

    <para>
		When you have downloaded and unziped the zip-file,
		you have to start it on a Unix like operating system by navigate with the comand line to the folder and type: java -jar "EDACC.jar".
    </para>
	<para>
		If you use Windows, you only have to execute the file EDACC.jar.
	</para>
	
  </section>
  
  <!-- another section -->
  <section>
    <title>Connect to the Database</title>

    <para>
		When you have started EDACC correctly you will see now the "connect to DB"-dialog. 
		Here you fill all fields with the correct data for your database.
		At last you press the connect-button.
		Without a connection to a database you can't do anything with EDACC.
    </para>
	
  </section>
  
  <!-- another section -->
  <section>
    <title>Create the tables</title>

    <para>
		If there is a empty database (DB) without any tables, you can create them with this option.
		First create a connection to your DB and make sure that you have required rights to create tables in the DB.
		If this was successfull, now all tabels and relations are created which were needed.
    </para>
	
  </section>
  
</chapter>

<chapter>
	<title>Introduction</title>
	
	<!-- verschachtelte sections -->
	<sect1>
		<title>What is EDACC</title>
		<para>
			EDACC (Experiment Design and Administration for Computer Clusters) is a tool to manage your solver with parameters, 
			instances and experiments for SAT (Boolean satisfiability problem). 
		</para>
		<para>
			EDACC is a queuing-tool for computer-cluster. It creats all files and skripts where have to exist. 
		</para>
			<sect2>
				<title>Manage Solver, instances and experiments</title>
				<para>
					You can add all your solver's with every parameter to your database (DB). So you can 
					manage and acess them from everywhere. 
				</para>
			</sect2>
			
			<sect2>
				<title>queuing-tool</title>
				<para>
					If you want to solve a job on a grid (cluster-computer) you first have to add your job in the queuing-system.
					This can be very complex, so you need all files on your cluster-device, a skript-file to start your jobs and somthing more.
					EDACC will create all this things in a zip-file for	you.
				</para>
			</sect2>
			
			<sect2>
				<title>Workflow example</title>
				<para>
					<itemizedlist>
						<listitem><para>Load solver and parameter</para></listitem>
						<listitem><para>Load instances</para></listitem>
						<listitem><para>Create experiment</para></listitem>
						<listitem><para>Select solver and set the parameter</para></listitem>
						<listitem><para>Select Instaces</para></listitem>
						<listitem><para>Set the number of runs</para></listitem>
						<listitem><para>Create the jobs</para></listitem>
						<listitem><para>Start the client on the grid</para></listitem>
						<listitem><para>Export the results</para></listitem>
					</itemizedlist>
				</para>
			</sect2>
	</sect1>
	
	<sect1>
		<title>Which informations does EDACC manage</title>
		<para>
			Here we will show the DB-modell and describe the components.
		</para>
		<sect2>
			<title>Solver, Parameter</title>
			<para>
				A solver has a name, a description and parameters. All this things and additionaly the binary of the solver is saved in the DB. A solver is a algorithm to find a solution for a given formula (instance).
			</para>
		</sect2>
		
		<sect2>
			<title>Instanceclasses</title>
			<para>
				The instanceclasses help you to manage your instances. Every instace has a sourceclass. 
				The sourceclass is the class of the instances where you added from one folder where all instances have the same style (e.g. random 3-sat).
				But you can also create userclasses. A userclass can contain variable instaces. 
			</para>
		</sect2>
		
		<sect2>
			<title>Instances</title>
			<para>
				A instance is a formula for the SAT-problem. Every instance has a name, a number of klauses, a number of variables and belong to a sourceclass.
				All this attributes plus the file from the instance were saved in the DB.
			</para>
		</sect2>
		
		<sect2>
			<title>Experiment (benchmark)</title>
			<para>
				An experiment contains one oder more solver with different parameters, some instances and a number of runs. 
				It creates all the jobs for the client.
			</para>
		</sect2>
	</sect1>
	
</chapter>

<chapter>
	<title>Manage DB Modus</title>
	
	<section>
		<title>Solver</title>
		<para>
		Here we will save the name, the description and the binaray from a solver. You see a overview of all your solvers.
		
		</para>
	</section>
	
	<section>
		<title>Paramter</title>
		<para>
		Every parameter belong to a solver, a parameter can not exist without a solver. For each parameter there will be saved in the DB the name of the parameter, the prefix which is send with the solver (like -s) and the order of this parameters. The boolean-flag is for parameters without a flag.
		The value of a parameter (if the boolean-flag is not set) will be set in the experiment-mode.
		</para>
	</section>
	
	<section>
		<title>Instanceclasses</title>
		<para>
		There are two types of instance classes. The first type is the sorceclass. Every instance belong to a sourceclass. If a couple of instances (e.g. a folder) where added to EDACC, there have to set a sourceclass name for this instances. 
		The second type is the userclass 
		</para>
	</section>
	
	<section>
		<title>Instance</title>
		<para>
		contains variables and klauses
		</para>
	</section>
</chapter>

<chapter>
	<title>Experiment Mode</title>
	
	<section>
		<title>Experiment Management</title>
		<para>
			An experiment is identified about the name and the date where it is created. Also some things like max-memory or max-time usage were defined here. The max seed value is the upper bound for the autogenerated seed-value. The "generate seeds" - button create the seeds for the solver who need such a seed. If there are more solvers with this type ob seed you can cobine this seed-values with the "link seeds" - button, that all solvers get in one run the same seed.
			
		</para>
	</section>
	
	<section>
		<title>...</title>
		<para>
		...
		</para>
	</section>
</chapter>

<chapter>
	<title>GridQueues</title>
	
	<section>
		<title>was es da halt so gibt</title>
		<para>
		und dann schön erklärt
		</para>
	</section>
</chapter>

<chapter>
	<title>Client</title>
	
	<section>
		<title>ne section</title>
		<para>
		und dann was die da macht
		</para>
	</section>
</chapter>

<!-- Via XInclude we can include document parts
     You can use Xalan's xpointer features to select parts of your included document
     or include all of it.
-->
<!--
<xi:include href="book-include.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
-->

</book>
