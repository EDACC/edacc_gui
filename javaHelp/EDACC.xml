<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of DobuDish                                           -->

<!-- DobuDish is free software; you can redistribute it and/or modify        -->
<!-- it under the terms of the GNU General Public License as published by    -->
<!-- the Free Software Foundation; either version 2 of the License, or       -->
<!-- (at your option) any later version.                                     -->

<!-- DobuDish is distributed in the hope that it will be useful,             -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of          -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           -->
<!-- GNU General Public License for more details.                            -->

<!-- You should have received a copy of the GNU General Public License       -->
<!-- along with DobuDish; if not, write to the Free Software                 -->
<!-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
  [
    <!ENTITY % global.entities SYSTEM "../../../system/custom-xsl/global-entities.xml">
    %global.entities;

    <!ENTITY % entities SYSTEM "../custom-cfg/local-entities.xml">
    %entities;
  ]
>

<book lang="en">

  <bookinfo>

   <title>EDACC</title>
    <pubdate>2010</pubdate>
<!--
    <copyright>
      <year>2010</year>
      <holder></holder>
    </copyright>
-->
  </bookinfo>

  <!-- bild einfuegen 
  		<mediaobject>
			<imageobject>
				<imagedata fileref="resource/test.png" format="PNG"/>
			</imageobject>
		</mediaobject>
 -->
		
<chapter>
	<title>Introduction</title>
	<para>
		EDACC has three parts. 
	</para>
	<para>
		The first part is a management-tool. EDACC manage all solvers with all parameters and all instances in a database. Also the jobs for an experiment and the results were saved.
	</para>
	<para>
		The second part is a design-tool. For all selected solvers with paramters and instances, EDACC create the jobs (a job is declared in the "Experiment Mode") for an experiment with the given runs. 
	</para>
	<para>
		The third and last part is a analyse-tool. All result from the database can be graphical represented. So the diffenence between two solvers, parameters or instances is seen easily.
	</para>
</chapter>

<chapter>
	<title>Systemrequirements</title>
	
	<section>
	<title>client</title>
	
		<para>
			Hard: The client need a X86-achitecture to run (another architecture like 64-bit is not tested).
		</para>
		
		<para>
			Soft: The client run on a linux operating system and need some dynamic libs like the linux-vdso.so, libpthread.so and libc.so.
			Addionaly is a connection to the database necessary.
		</para>
	</section>
	
	<section>
	<title>GUI</title>
	
		<para>
			Hard: To run the GUI you need: CPU with 800 MHZ, 512 MB RAM (or higher), 200 MB HDD-space and a display resolution of 1024 x 768.
			To analyse the experiments in the experiment-mode some R - libs are requiered.
		</para>
		
		<para>
			Soft: To run the GUI the Java Virtual Machine version 6 is requiered.
		</para>
	</section>
	
	<section>
	<title>DB</title>
	
		<para>
			Hard:
		</para>
		
		<para>
			Soft: The database have to be a mySQL 5.1.
		</para>
	</section>
	
	<section>
	<title>Web</title>
	
		<para>
			Hard:
		</para>
		
		<para>
			Soft:
		</para>
	</section>
</chapter>
  
<chapter>
	<title>How to start</title>
	
	<itemizedlist>
		<listitem><para>First you have to create a mySQL database with read and write access.</para></listitem>
		<listitem><para>Now the GUI can be started. On Windows you only have to execute the EDACC.jar file. On a Linux-like operating system you have to navigate with the comand line to the folder and type: java -jar "EDACC.jar".</para></listitem>
		<listitem><para>Then the tables can be created in the database. For this you start edacc. Then you connect to your database which was created in point one with your database-ip, the port, the database-name and the username + password. Now you can crate the tables with the menu. You select "File" -> "Generate tables". If you have write-access on the selected database, the required tables are created.</para></listitem>
	</itemizedlist>
	
	<section>
		<title>(typical) Workflow to create a new experiment</title>
		
		<para>
			There exist 2 modis, in the menubar. The first mode is the "ManageDB mode". It contain all CRUD-operations (create, read, update, delet) for solvers and instances.
			The second mode is the "Experiment mode". It manage the experiments.
		</para>
		Workflow:
		<itemizedlist>
			<listitem><para>Start the EDACC-GUI.</para></listitem>
			<listitem><para>Connect to the database and optionaly create the tables if they not exist.</para></listitem>
			<listitem><para>Select the "Manage DB mode".</para></listitem>
			<listitem><para>Stay in the "Solvers"-Tab. Press the "new"-button on the left (solver) side.</para></listitem>
			<listitem><para>Declare a name for your solver and a description in the fields.</para></listitem>
			<listitem><para>Press the "Add binary"-button and add the compiled binary of the solver to the database.</para></listitem>
			<listitem><para>Optionaly press the "Add source files"-button and add the sourcecode and so on to the database.</para></listitem>
			<listitem><para>If your solver has parameters, add them now on the right (parameter) side. Click on the "new"-button and declare a name (or short description), the prefix for the comandline and the order of the parameters on the comandline.</para></listitem>
			<listitem><para>If all solvers with their parameters are added, press the "Save to DB"-button and switch to the "instances"-tab.</para></listitem>
			<listitem><para>Press the "Add"-button on the right side to add new instances. Select the option "Automatic source class generation", set the depth of recursive folders and press the "OK"-button. Select the root-folder of your instances and EDACC will automatic add all instances in all recursive folders until the depth is reached.</para></listitem>
			<listitem><para>Now everything to create an experiment were added to the database. Change the mode to the "Experiment mode"</para></listitem>
			<listitem><para>Press the "Create"-button to create a new experiment. Declare here a name and a description for the experiment.</para></listitem>
			<listitem><para>The new experiment should be selected and then press the "Load"-button.</para></listitem>
			<listitem><para>Declare the "Experiment Parameters" on the bottom.</para></listitem>
			<listitem><para>Switch to the "Solvers"-tab. Select the solvers to test and press the "Choose"-button. Declare the parameters you need and set a value.</para></listitem>
			<listitem><para>Press the "Save"-button and switch to the "Instances"-tab.</para></listitem>
			<listitem><para>First select one or more instaceclass oder userclass. Than select the instances to test the solvers and press the "Save"-button.</para></listitem>
			<listitem><para>Switch to the "Generate Jobs"-tab and declare the number of runs per solver and instance. Select a queue and generate the "cluster package". At last "Generate Jobs" for the database.</para></listitem>
			<listitem><para>Now everything exist. All solvers and instances were in the created package and the jobs exist in the database. Copy the package on your device or folder where the skripts can access to (on the grid).</para></listitem>
			<listitem><para>Start the created skripts. In the next "Experiment mode"-tab (it is the "Job Browser"-tag) the progress is shown.</para></listitem>
		</itemizedlist>
	</section>
</chapter>
  
<chapter>
	<title>Manage DB-Modus</title>
	
	<section>
		<title>Solver</title>
		<para>
			DB-Model <sbr/> <!-- das ist ein Zeilenumbruch -->
			
			<table><title>Solver</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<tbody>
			<row>
			  <entry>SolverID</entry>
			  <entry>This is an ID to manage the solvers in the DB.</entry>
			</row>
			<row>
			  <entry>Name</entry>
			  <entry>The name wich is shown in the GUI.</entry>
			</row>
			<row>
			  <entry>Binary</entry>
			  <entry>Is the compiled (executable) code of the solver.</entry>
			</row>
			<row>
			  <entry>Description</entry>
			  <entry>Save the description from the GUI in the DB.</entry>
			</row>
			<row>
			  <entry>md5</entry>
			  <entry>is the md5-checksum from the solverbinary.</entry>
			</row>
			<row>
			  <entry>Code</entry>
			  <entry>save the uncompiled sourcecode of your solver.</entry>
			</row>
			<row>
			  <entry>Version</entry>
			  <entry>is the version of the solver.</entry>
			</row>
			</tbody>
			</tgroup>
			</table>
			
		</para>
		
		<para> 
			Boundary Conditions <sbr/>
			<itemizedlist>
				<listitem><para>Every solver need a name and a version, because this tuple is unique.</para></listitem>
				<listitem><para>The md5-checksum is also unique, so it is not possible to save one solver two times.</para></listitem>
				<listitem><para>The source code and the description is optionaly.</para></listitem>
			</itemizedlist>
		</para>
		
	</section>
	<section>
		<title>Parameter</title>
		<para>
			DB-Model <sbr/> 

			<table><title>Parameter</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<tbody>
			<row>
			  <entry>ParameterID</entry>
			  <entry>This is an ID to manage the Parameters in the DB.</entry>
			</row>
			<row>
			  <entry>Name</entry>
			  <entry>Is a significant name wich is shown in the GUI.</entry>
			</row>
			<row>
			  <entry>Prefix</entry>
			  <entry>Is the prefix to start the solver (like "-s").</entry>
			</row>
			<row>
			  <entry>Has Value</entry>
			  <entry>Is a boolean flag. It's true if the parameter need a value (like "-seed 234").</entry>
			</row>
			<row>
			  <entry>SolverID</entry>
			  <entry>Is the ID of the appendent Solver.</entry>
			</row>
			<row>
			  <entry>Order</entry>
			  <entry>Is the order of the parameters when the solver is started.</entry>
			</row>
			</tbody>
			</tgroup>
			</table>

		</para>
		
		<para> 
			Boundary Conditions <sbr/>
			<itemizedlist>
				<listitem><para>Every Parameter appendent solver. A parameter can not exist without solver.</para></listitem>
				<listitem><para>The Value of the parameter is set in the "Experiment Mode".</para></listitem>
			</itemizedlist>
		</para>
		
	</section>
	<section>
		<title>Instances and classes</title>
		<para>
			DB-Model <sbr/> 
			
			<table><title>Instance class</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<tbody>
			<row>
			  <entry>ClassID</entry>
			  <entry>This is the ID to manage the instanceclasses in the DB.</entry>
			</row>
			<row>
			  <entry>Name</entry>
			  <entry>Is the class name wich is shown in the GUI.</entry>
			</row>
			<row>
			  <entry>Description</entry>
			  <entry>Is the description of the class and is shown in the GUI.</entry>
			</row>
			<row>
			  <entry>Source</entry>
			  <entry>Is an boolean flag. It's true, if the class is a source class.</entry>
			</row>
			</tbody>
			</tgroup>
			</table>
			
			<table><title>Instance</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
			<tbody>
			<row>
			  <entry>InstanceID</entry>
			  <entry>This is an ID to mange the instances in the DB.</entry>
			</row>
			<row>
			  <entry>Name</entry>
			  <entry>Is the name of the instance wich is shown in the GUI.</entry>
			</row>
			<row>
			  <entry>Instance</entry>
			  <entry>Is the instancefile (e.g. the textfile).</entry>
			</row>
			<row>
			  <entry>md5</entry>
			  <entry>Is the calculated md5-checksum of the saved file.</entry>
			</row>
			<row>
			  <entry>Atoms</entry>
			  <entry>Is the number of variables in the instance.</entry>
			</row>
			<row>
			  <entry>Clauses</entry>
			  <entry>Is the number of clauses in the instance.</entry>
			</row>
			<row>
			  <entry>Ratio</entry>
			  <entry>Is the value of atoms / clauses</entry>
			</row>
			<row>
			  <entry>Clause Length</entry>
			  <entry>Is the maximal length of a clause in the instance.</entry>
			</row>
			<row>
			  <entry>ClassID</entry>
			  <entry>Is the ID of the appendent class.</entry>
			</row>
			</tbody>
			</tgroup>
			</table>
			
		</para>
		
		<para> 
			Boundary Conditions <sbr/>
			<itemizedlist>
				<listitem><para>Every instance belong to exact one source class.</para></listitem>
				<listitem><para>It's not possible to save a instance twice because the md5-checksum is unique.</para></listitem>
				<listitem><para>The value of the atoms, clauses and ratio will be set automaticly if you add the instace (a parser calculate them).</para></listitem>
				<listitem><para>An Instance can belong to many userclasses.</para></listitem>
			</itemizedlist>
		</para>
		
	</section>
</chapter>
  
<chapter>
	<title>Experiment-Modus</title>
	<para>
		An experiment is a cartesian product of a set of solver configurations, a set of instances, a set of computing systems and some computational limits.
		<sbr/>(Experiment = {Solver configuration} X {Instance} X {Computing system} X {Runtime propertie} = {Job})<sbr/>
	</para>
	
	<section>
		<title>Experiment dates</title>
		<para>

		</para>
	</section>
</chapter>
  
 <chapter>
	<title>(Compute-) Client</title>
	<para>
		The client consists of three sub components, the luncher, the watcher and the verifier. <!--Adrian fragen wie der client gestartet wird? -->
	</para>
	
	<section>
		<title>Luncher</title>
		<para>
			The luncher create the DB-connection and is responsible for fetching not computed jobs and downloading all necessary files which were not in the package.
		</para>
	</section>
	<section>
		<title>Watcher</title>
		<para>
			The watcher starts the solver with the choosen configuration. It also monitor the consuming resources and if a solver exceed a limit the watcher stop the solver. 
		</para>
	</section>
	<section>
		<title>Verifier</title>
		<para>
			The verifier is a problemspecific component and has to be provided by the user. For SAT-problems it check if the calculated solution is correct.
		</para>
	</section>
</chapter>
  
<chapter>
	<title>Web (Frontend)</title>
	<para>
	
	</para>
</chapter>
  
 

<!-- Via XInclude we can include document parts
     You can use Xalan's xpointer features to select parts of your included document
     or include all of it.
-->
<!--
<xi:include href="book-include.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
-->

</book>
