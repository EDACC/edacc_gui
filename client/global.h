/*defines all the needed C data structures for saving the table entries
 *
 *
 */
#ifndef GLOBAL_H
#define GLOBAL_H

#include <sys/types.h>

//#define VALUELENGTH 64
//some parameters that controll the behaviour of the client
int verbosity;
int keepResults;
//specify how many seconds the client should wait for the DB if no connection is possible
int waitForDB;
//how many times should the client try to connect?
int connectAttempts;

//how long should the client wait for jobs?
int waitForJobs;

//how long should the client wait till the next scan for jobs
int scanForJobs;




/* experiment info */
int numRuns;
int CPUTimeLimit;
int autoGeneratedSeeds;
char *name;

/* grid info */
int numCPUs;
int maxRuntime;
int maxJobsInQueue;

/* config file values */
char *host;
char *username;
char *password;
char *database;
unsigned int port;
int experimentId;
int gridQueueId;

typedef enum {success=0, sysError, dbError} status;

typedef struct {
	int id; //experiment id
	char *name; //name of the experiment
	int numCPUs; // number of cpus
	int CPUTimeLimit; //code 1
	int wallClockTimeLimit; //code 2
	int memoryLimit; //code 3
	int stackSizeLimit; //code 4
	int outPutSizeLimit; //code 5
	//int numInstances; // number of used instances
	//char **md5Instances; // md5 sums of instance files
	// the instances, manually appended with 0x00,
	// because column type in table is mediumblob
	//char **instances; 	//TODO: is this ever necessary?
	//char **instanceNames; //the name of the instances
	//TODO: /* This is probably not needed anymore
	//int *idInstances; // the instances ids*/
	//int numSolvers; // number of used solvers
	//int *lengthSolver; // length of each solver
	//char **md5Solvers; // the md5 sums for each solver
	// the binary for each solver, NOT terminated by 0x00
	//char **solvers; //TODO: is this ever necessary?
	//char **solverNames; // the names for each solver
} experiment;

typedef struct {
	//Needed for the process handling
	pid_t pid;
	// identifies the row in the result table
	int id;
	int seed;  // the seed for the solver


	int status; 	// the status of the job (see documentation)
	char *startTime; //The time the run started as a '\0' terminated string //startTime[7]
	float resultTime; // the runtime of the solver


	int resultCode; // code for the result of this job (see documentation)

	char *solverOutputFN; //the file name of the solver output
	char *launcherOutputFN; //the file name of the launcher output
	char *watcherOutputFN; //the file name of the watcher output
	char *verifierOutputFN; //the file name of the verifier output

	char *solverOutput; //the  solver output
	char *launcherOutput; //the launcher output
	char *watcherOutput; //the watcher output
	char *verifierOutput; //the verifier output

	int solverExitCode;
	int watcherExitCode;
	int verifierExitCode;
	int computeQueue;

	char *solverName; // the used solver for this job.
	char *solverVersion; // the used solver for this job.
	char params[1024]; // the full param string
	char *instanceName; //the name of the instance
	char *binaryName;
} job;

typedef struct {
	char *solverName;
	char *solverVersion;

	int length; // length of the solver
	char *md5; // the md5 sum of the solver
	// the binary of the solver, NOT terminated by 0x00
	char *solver;
} solver;

typedef struct {
	// the instance, manually appended with 0x00,
	// because column type in table is mediumblob
	char *instance;
	char *md5; // md5 sum of the instance file
} instance;

#endif
