#ifndef GLOBAL_H
#define GLOBAL_H

#include <sys/types.h>

#define VALUELENGTH 64

/* experiment info */
int numRuns;
int timeOut;
int autoGeneratedSeeds;
char *name;

/* grid info */
int numNodes;
int maxRuntime;
int maxJobsInQueue;

/* config file values */
char host[VALUELENGTH];
char username[VALUELENGTH];
char password[VALUELENGTH];
char database[VALUELENGTH];
//int experiment;

typedef enum {success=0, sysError, dbError} status;

typedef struct {
    int numNodes;
    int timeOut;
    int numInstances;
    // not needed, because instances are terminated by 
    // 0x00 manually.
    //int *lengthInstance;
    char **md5Instances;
    char **instances;
    int *idInstances;
    int numSolvers;
    int *lengthSolver;
    char **md5Solvers;
    char **solvers;
    char **solverNames;
} experiment;

typedef struct {
    //Needed for the process handling
    pid_t pid;
    // identifies the row in the result table
    int id;
    //int idJob;
    int seed;
    char *resultFileName;
    int SolverConfig_idSolverConfig;
    int Instances_idInstance;
    char *solverName;
    //config *config;
    char params[256];
    //instance *instance;
    int idInstance;
} job;



/* Old structs of the previous model 
typedef struct {
    int id;
    char name[64];
    char *binary;
} solver;

typedef struct {
    solver *solver;
    char params[256];
} config;

typedef struct {
    int idJob;
    int run;
    int status;
    int seed;
    char *resultFileName;
    int statusCode;
    int SolverConfig_idSolverConfig;
    int Instances_idInstance;
    config *config;
    instance *instance;
} result;

typedef struct {
    char *instance;
} instance;
*/
    

#endif
