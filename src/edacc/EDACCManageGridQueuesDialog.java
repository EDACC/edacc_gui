/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EDACCManageGridQueuesDialog.java
 *
 * Created on 11.05.2010, 16:13:30
 */

package edacc;

import edacc.gridqueues.GridQueuesController;
import edacc.gridqueues.QueueListModel;
import edacc.model.GridQueue;
import edacc.model.GridQueueDAO;
import edacc.model.NoConnectionToDBException;
import java.awt.Color;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author dgall
 */
public class EDACCManageGridQueuesDialog extends javax.swing.JDialog {

    private EDACCGridSettingsView gridSettings;

    /** Creates new form EDACCManageGridQueuesDialog */
    public EDACCManageGridQueuesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        gridSettings = new EDACCGridSettingsView(parent, true, this);
        initComponents();
        lblSelected.setForeground(Color.red);
        try {
            listQueues.setModel(new QueueListModel());
        } catch (NoConnectionToDBException ex) {
            JOptionPane.showMessageDialog(this, "You have to establish a connection to the database first!", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "A database error occured while loading the dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblChosenQueue = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listQueues = new javax.swing.JList();
        btnCreateQueue = new javax.swing.JButton();
        btnChooseQueue = new javax.swing.JButton();
        btnRemoveQueue = new javax.swing.JButton();
        btnEditQueue = new javax.swing.JButton();
        lblSelected = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCManageGridQueuesDialog.class);
        setTitle(resourceMap.getString("dlgManageQueues.title")); // NOI18N
        setName("dlgManageQueues"); // NOI18N

        lblChosenQueue.setText(resourceMap.getString("lblChosenQueue.text")); // NOI18N
        lblChosenQueue.setName("lblChosenQueue"); // NOI18N

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listQueues.setName("listQueues"); // NOI18N
        jScrollPane1.setViewportView(listQueues);

        btnCreateQueue.setText(resourceMap.getString("btnCreateQueue.text")); // NOI18N
        btnCreateQueue.setName("btnCreateQueue"); // NOI18N
        btnCreateQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateQueue(evt);
            }
        });

        btnChooseQueue.setText(resourceMap.getString("btnChooseQueue.text")); // NOI18N
        btnChooseQueue.setName("btnChooseQueue"); // NOI18N
        btnChooseQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseQueue(evt);
            }
        });

        btnRemoveQueue.setText(resourceMap.getString("btnRemoveQueue.text")); // NOI18N
        btnRemoveQueue.setName("btnRemoveQueue"); // NOI18N
        btnRemoveQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveQueue(evt);
            }
        });

        btnEditQueue.setText(resourceMap.getString("btnEditQueue.text")); // NOI18N
        btnEditQueue.setName("btnEditQueue"); // NOI18N
        btnEditQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditQueue(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCreateQueue)
                            .addComponent(btnEditQueue))
                        .addComponent(btnRemoveQueue))
                    .addComponent(btnChooseQueue))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnChooseQueue, btnCreateQueue, btnEditQueue, btnRemoveQueue});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreateQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(btnChooseQueue))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addContainerGap())
        );

        lblSelected.setText(resourceMap.getString("lblSelected.text")); // NOI18N
        lblSelected.setName("lblSelected"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblChosenQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblChosenQueue)
                    .addComponent(lblSelected)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        lblSelected.getAccessibleContext().setAccessibleName(resourceMap.getString("jLabel1.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateQueue
        try {
            gridSettings.loadSettings(null);
            gridSettings.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot show create dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateQueue

    private void btnEditQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditQueue
        GridQueue selected = (GridQueue) listQueues.getSelectedValue();
        if (selected == null)
            return;
        try {
            gridSettings.loadSettings(selected);
            gridSettings.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot show edit dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditQueue

    private void btnChooseQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseQueue
        GridQueue selected = (GridQueue) listQueues.getSelectedValue();
        if (selected == null)
            return;
        GridQueuesController.getInstance().setChosenQueue(selected);
        //lblChosenQueue.setText("Chosen queue: " + selected.getName());
        this.lblSelected.setText(selected.getName());
    }//GEN-LAST:event_btnChooseQueue

    private void btnCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel
        this.setVisible(false);
    }//GEN-LAST:event_btnCancel

    private void btnRemoveQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveQueue
        Object[] selected = listQueues.getSelectedValues();
        if (selected.length <= 0)
            return;
        try {
            Vector<GridQueue> queuesInExp = new Vector<GridQueue>();
            for (Object s : selected) {
                GridQueue q = (GridQueue) s;
                if (GridQueueDAO.isInAnyExperiment(q))
                    queuesInExp.add(q);
                else
                    GridQueueDAO.remove(q);
            }
            if (queuesInExp.size() > 0)
                EDACCExtendedWarning.showMessageDialog(EDACCExtendedWarning.OK_OPTIONS,
                        EDACCApp.getApplication().getMainFrame(),
                        "The following queues couldn't be removed, because they are used in an experiment:",new JTable(new VectorTableModel(queuesInExp)) );
//                EDACCApp.getApplication().show(new EDACCExtWarningErrorDialog(this, true, false,
//                        new VectorTableModel(queuesInExp),
//                        "The following queues couldn't be removed, because they are used in an experiment:"));
            refreshView();
        } catch (NoConnectionToDBException ex) {
            JOptionPane.showMessageDialog(this, "You have to establish a connection to the database first!", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured while removing the queue from database: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveQueue

    public void refreshView() throws NoConnectionToDBException, SQLException {
        // refresh list
        ((QueueListModel) listQueues.getModel()).refreshQueues();
        // refresh "chosen queue" text
        GridQueue selected = GridQueuesController.getInstance().getChosenQueue();
        if (selected == null)
            lblChosenQueue.setText("Chosen queue: ");
        else
        //    lblChosenQueue.setText("Chosen queue: " + selected.getName());
        this.lblSelected.setText(selected.getName());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooseQueue;
    private javax.swing.JButton btnCreateQueue;
    private javax.swing.JButton btnEditQueue;
    private javax.swing.JButton btnRemoveQueue;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChosenQueue;
    private javax.swing.JLabel lblSelected;
    private javax.swing.JList listQueues;
    // End of variables declaration//GEN-END:variables


    private class VectorTableModel extends AbstractTableModel {

        private Vector<GridQueue> queues;

        public VectorTableModel(Vector<GridQueue> queues) {
            this.queues = queues;
        }

        public int getRowCount() {
            return queues.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0)
                return queues.get(rowIndex).getName();
            if (columnIndex == 1)
                return queues.get(rowIndex).getDescription();
            return null;
        }

        @Override
        public String getColumnName(int col) {
            if (col == 0)
                return "Name";
            if (col == 1)
                return "Description";
            return null;
        }
        
    }
}
