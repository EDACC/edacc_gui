/*
 * EDACCManageGridQueuesDialog.java
 *
 * Created on 11.05.2010, 16:13:30
 */
package edacc;

import edacc.experiment.ExperimentController;
import edacc.gridqueues.GridQueuesController;
import edacc.gridqueues.QueueListModel;
import edacc.model.GridQueue;
import edacc.model.GridQueueDAO;
import edacc.model.NoConnectionToDBException;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author dgall
 */
public class EDACCManageGridQueuesDialog extends javax.swing.JDialog {

    private ExperimentController expController;
    private EDACCGridSettingsView gridSettings;
    private QueueListModel queueListModel;

    /** Creates new form EDACCManageGridQueuesDialog */
    public EDACCManageGridQueuesDialog(java.awt.Frame parent, boolean modal, ExperimentController expController) {
        super(parent, modal);
        gridSettings = new EDACCGridSettingsView(parent, true, this);
        initComponents();
        this.expController = expController;
        if (expController == null) {
            btnChooseQueues.setVisible(false);
        } else {
            btnRemoveQueue.setVisible(false);
            btnEditQueue.setVisible(false);
        }
        try {
            queueListModel = new QueueListModel(expController);
            listQueues.setModel(queueListModel);
            listQueues.addListSelectionListener(new QueueListSelectionListener());
            listQueues.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent event) {
                    JList list = (JList) event.getSource();

                    // Get index of item clicked
                    int index = list.locationToIndex(event.getPoint());
                    JCheckBox item = queueListModel.checkBoxes.get(index);
                    // Toggle selected state
                    item.setSelected(!item.isSelected());
                    // Repaint cell
                    list.repaint(list.getCellBounds(index, index));
                }
            });
            listQueues.setCellRenderer(new ListCellRenderer() {

                @Override
                public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

                    if (EDACCManageGridQueuesDialog.this.expController != null) {
                        return EDACCManageGridQueuesDialog.this.queueListModel.checkBoxes.get(index);
                    } else {
                        GridQueue queue = (GridQueue) value;
                        JLabel lbl = new JLabel(queue.getName());
                        lbl.setOpaque(true);
                        if (isSelected) {
                            lbl.setBackground(listQueues.getSelectionBackground());
                            lbl.setForeground(listQueues.getSelectionForeground());
                        } else {
                            lbl.setBackground(listQueues.getBackground());
                            lbl.setForeground(listQueues.getForeground());
                        }
                        return lbl;
                    }
                }
            });
            listQueues.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            // deselect all queues and set the edit/del/choose-buttons disabled
            listQueues.clearSelection();
            setButtonStates(false);
        } catch (NoConnectionToDBException ex) {
            JOptionPane.showMessageDialog(this, "You have to establish a connection to the database first!", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "A database error occured while loading the dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listQueues = new javax.swing.JList();
        btnCreateQueue = new javax.swing.JButton();
        btnRemoveQueue = new javax.swing.JButton();
        btnEditQueue = new javax.swing.JButton();
        btnChooseQueues = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCManageGridQueuesDialog.class);
        setTitle(resourceMap.getString("dlgManageQueues.title")); // NOI18N
        setName("dlgManageQueues"); // NOI18N

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(69, 23));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        listQueues.setToolTipText(resourceMap.getString("listQueues.toolTipText")); // NOI18N
        listQueues.setName("listQueues"); // NOI18N
        listQueues.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listQueues);

        btnCreateQueue.setText(resourceMap.getString("btnCreateQueue.text")); // NOI18N
        btnCreateQueue.setToolTipText(resourceMap.getString("btnCreateQueue.toolTipText")); // NOI18N
        btnCreateQueue.setName("btnCreateQueue"); // NOI18N
        btnCreateQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateQueue(evt);
            }
        });

        btnRemoveQueue.setText(resourceMap.getString("btnRemoveQueue.text")); // NOI18N
        btnRemoveQueue.setToolTipText(resourceMap.getString("btnRemoveQueue.toolTipText")); // NOI18N
        btnRemoveQueue.setName("btnRemoveQueue"); // NOI18N
        btnRemoveQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveQueue(evt);
            }
        });

        btnEditQueue.setText(resourceMap.getString("btnEditQueue.text")); // NOI18N
        btnEditQueue.setToolTipText(resourceMap.getString("btnEditQueue.toolTipText")); // NOI18N
        btnEditQueue.setName("btnEditQueue"); // NOI18N
        btnEditQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditQueue(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnCreateQueue)
                        .addComponent(btnEditQueue))
                    .addComponent(btnRemoveQueue))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreateQueue, btnEditQueue, btnRemoveQueue});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreateQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditQueue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveQueue))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnChooseQueues.setText(resourceMap.getString("btnChooseQueues.text")); // NOI18N
        btnChooseQueues.setToolTipText(resourceMap.getString("btnChooseQueues.toolTipText")); // NOI18N
        btnChooseQueues.setName("btnChooseQueues"); // NOI18N
        btnChooseQueues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseQueues(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChooseQueues)
                        .addGap(13, 13, 13))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChooseQueues)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateQueue
        try {
            gridSettings.loadSettings(null);
            gridSettings.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot show create dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateQueue

    private void btnEditQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditQueue
        GridQueue selected = (GridQueue) listQueues.getSelectedValue();
        if (selected == null) {
            return;
        }
        try {
            gridSettings.loadSettings(selected);
            gridSettings.setVisible(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Cannot show edit dialog: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditQueue

    private void btnChooseQueues(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseQueues
        try {
            expController.assignQueuesToExperiment(queueListModel.getSelectedGridQueues());
            GridQueuesController.getInstance().gridQueueSelectionChanged();
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "An error occured while assigning a grid queue to the experiment: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        setVisible(false);
    }//GEN-LAST:event_btnChooseQueues

    private void btnCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel
        this.setVisible(false);
    }//GEN-LAST:event_btnCancel

    private void btnRemoveQueue(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveQueue
        Object[] selected = listQueues.getSelectedValues();
        if (selected.length <= 0) {
            return;
        }
        try {
            ArrayList<GridQueue> queuesInExp = new ArrayList<GridQueue>();
            for (Object s : selected) {
                GridQueue q = (GridQueue) s;
                if (GridQueueDAO.isInAnyExperiment(q)) {
                    queuesInExp.add(q);
                } else {
                    GridQueueDAO.remove(q);
                }
            }
            if (queuesInExp.size() > 0) {
                EDACCExtendedWarning.showMessageDialog(EDACCExtendedWarning.OK_OPTIONS,
                        EDACCApp.getApplication().getMainFrame(),
                        "The following queues couldn't be removed, because they are used in an experiment:", new JTable(new VectorTableModel(queuesInExp)));
            }
//                EDACCApp.getApplication().show(new EDACCExtWarningErrorDialog(this, true, false,
//                        new VectorTableModel(queuesInExp),
//                        "The following queues couldn't be removed, because they are used in an experiment:"));
            refreshView();
            listQueues.clearSelection();
        } catch (NoConnectionToDBException ex) {
            JOptionPane.showMessageDialog(this, "You have to establish a connection to the database first!", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "An error occured while removing the queue from database: " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveQueue

    private void tableClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClicked
        if (evt.getClickCount() == 2) {
            btnEditQueue.doClick();
        }
    }//GEN-LAST:event_tableClicked

    public void refreshView() throws NoConnectionToDBException, SQLException {
        // refresh list
        ((QueueListModel) listQueues.getModel()).refreshQueues();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooseQueues;
    private javax.swing.JButton btnCreateQueue;
    private javax.swing.JButton btnEditQueue;
    private javax.swing.JButton btnRemoveQueue;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listQueues;
    // End of variables declaration//GEN-END:variables

    private class VectorTableModel extends AbstractTableModel {

        private ArrayList<GridQueue> queues;

        public VectorTableModel(ArrayList<GridQueue> queues) {
            this.queues = queues;
        }

        @Override
        public int getRowCount() {
            return queues.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return queues.get(rowIndex).getName();
            }
            if (columnIndex == 1) {
                return queues.get(rowIndex).getDescription();
            }
            return null;
        }

        @Override
        public String getColumnName(int col) {
            if (col == 0) {
                return "Name";
            }
            if (col == 1) {
                return "Description";
            }
            return null;
        }
    }

    private class QueueListSelectionListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            setButtonStates(((JList) e.getSource()).getSelectedValues().length > 0);
        }
    }

    /**
     * Sets the enable states of the buttons which need a selected queue.
     * @param enabled
     */
    private void setButtonStates(boolean enabled) {
        btnEditQueue.setEnabled(enabled);
        btnRemoveQueue.setEnabled(enabled);
    }
}
