/*
 * EDACCGeneratePackageFileChooser.java
 *
 * Created on 01.10.2010, 17:35:32
 */
package edacc;

import edacc.events.TaskEvents;
import edacc.experiment.ExperimentController;
import edacc.experiment.Util;
import edacc.model.Tasks;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import org.jdesktop.application.ApplicationContext;

/**
 *
 * @author simon
 */
public class EDACCGeneratePackageFileChooser extends javax.swing.JDialog implements TaskEvents {

    private final String generatepackage_settings_filename = "generate_package.xml";
    private ExperimentController expController;

    /** Creates new form EDACCGeneratePackageFileChooser */
    public EDACCGeneratePackageFileChooser(java.awt.Frame parent, boolean modal, ExperimentController expController) {
        super(parent, modal);
        initComponents();
        this.expController = expController;

        File clientBinary = null;
        File verifierBinary = null;
        ApplicationContext ctxt = EDACCApp.getApplication().getContext();
        try {
            Map<String, String> map = (Map<String, String>) ctxt.getLocalStorage().load(generatepackage_settings_filename);
            String fn;
            if (map != null && (fn = map.get("client_binary_location")) != null) {
                clientBinary = new File(fn);
            }
            if (map != null && (fn = map.get("verifier_binary_location")) != null) {
                verifierBinary = new File(fn);
            }
        } catch (IOException ex) {
        }
        if (clientBinary == null || !clientBinary.exists() || clientBinary.isDirectory()) {
            clientBinary = new File(Util.getPath() + "/bin/client");
        }
        if (verifierBinary == null || !verifierBinary.exists() || verifierBinary.isDirectory()) {
            verifierBinary = new File(Util.getPath() + "/bin/verifiers/SAT");
        }
        txtClientLocation.setText(clientBinary.getPath());
        txtVerifierLocation.setText(verifierBinary.getPath());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chkInstances = new javax.swing.JCheckBox();
        chkSolvers = new javax.swing.JCheckBox();
        chkClient = new javax.swing.JCheckBox();
        chkRunsolver = new javax.swing.JCheckBox();
        chkConfig = new javax.swing.JCheckBox();
        txtClientLocation = new javax.swing.JTextField();
        btnChooseClientBinary = new javax.swing.JButton();
        chkVerifier = new javax.swing.JCheckBox();
        txtVerifierLocation = new javax.swing.JTextField();
        btnChooseVerifierBinary = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        packageFileChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCGeneratePackageFileChooser.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        chkInstances.setText(resourceMap.getString("chkInstances.text")); // NOI18N
        chkInstances.setName("chkInstances"); // NOI18N

        chkSolvers.setText(resourceMap.getString("chkSolvers.text")); // NOI18N
        chkSolvers.setName("chkSolvers"); // NOI18N

        chkClient.setSelected(true);
        chkClient.setText(resourceMap.getString("chkClient.text")); // NOI18N
        chkClient.setName("chkClient"); // NOI18N

        chkRunsolver.setSelected(true);
        chkRunsolver.setText(resourceMap.getString("chkRunsolver.text")); // NOI18N
        chkRunsolver.setName("chkRunsolver"); // NOI18N

        chkConfig.setSelected(true);
        chkConfig.setText(resourceMap.getString("chkConfig.text")); // NOI18N
        chkConfig.setName("chkConfig"); // NOI18N

        txtClientLocation.setText(resourceMap.getString("txtClientLocation.text")); // NOI18N
        txtClientLocation.setName("txtClientLocation"); // NOI18N

        btnChooseClientBinary.setText(resourceMap.getString("btnChooseClientBinary.text")); // NOI18N
        btnChooseClientBinary.setName("btnChooseClientBinary"); // NOI18N
        btnChooseClientBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseClientBinaryActionPerformed(evt);
            }
        });

        chkVerifier.setSelected(true);
        chkVerifier.setText(resourceMap.getString("chkVerifier.text")); // NOI18N
        chkVerifier.setName("chkVerifier"); // NOI18N

        txtVerifierLocation.setText(resourceMap.getString("txtVerifierLocation.text")); // NOI18N
        txtVerifierLocation.setName("txtVerifierLocation"); // NOI18N

        btnChooseVerifierBinary.setText(resourceMap.getString("btnChooseVerifierBinary.text")); // NOI18N
        btnChooseVerifierBinary.setName("btnChooseVerifierBinary"); // NOI18N
        btnChooseVerifierBinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseVerifierBinaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkInstances)
                    .addComponent(chkSolvers)
                    .addComponent(chkRunsolver)
                    .addComponent(chkConfig)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkClient)
                            .addComponent(chkVerifier))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addComponent(txtVerifierLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnChooseVerifierBinary, 0, 0, Short.MAX_VALUE)
                    .addComponent(btnChooseClientBinary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chkInstances)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSolvers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkClient)
                    .addComponent(btnChooseClientBinary)
                    .addComponent(txtClientLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkVerifier)
                    .addComponent(btnChooseVerifierBinary)
                    .addComponent(txtVerifierLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRunsolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkConfig)
                .addGap(10, 10, 10))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        packageFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        packageFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        packageFileChooser.setName("packageFileChooser"); // NOI18N
        packageFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packageFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(packageFileChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(packageFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void packageFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packageFileChooserActionPerformed

        if (evt.getActionCommand().equals("ApproveSelection")) {
            File folder = new File(packageFileChooser.getSelectedFile().getAbsolutePath());
            if (!folder.exists()) {
                int userInput = javax.swing.JOptionPane.showConfirmDialog(Tasks.getTaskView(), "The directory " + folder.getAbsolutePath() + " doesn't exist. Should it be created?", "Generate cluster package", javax.swing.JOptionPane.YES_NO_OPTION);
                if (userInput == 1) {
                    return;
                } else {
                    folder.mkdirs();
                }
            }

            File clientBinary = null;
            if (chkClient.isSelected()) {
                clientBinary = new File(txtClientLocation.getText());
                if (!clientBinary.exists() || clientBinary.isDirectory()) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Client binary doesn't exist.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try {
                    Map<String, String> map = (Map<String, String>) EDACCApp.getApplication().getContext().getLocalStorage().load(generatepackage_settings_filename);
                    if (map == null) {
                        map = new HashMap<String, String>();
                    }
                    map.put("client_binary_location", txtClientLocation.getText());
                    EDACCApp.getApplication().getContext().getLocalStorage().save(map, generatepackage_settings_filename);
                } catch (IOException ex) {
                }
            }
            File verifierBinary = null;
            if (chkVerifier.isSelected()) {
                verifierBinary = new File(txtVerifierLocation.getText());
                if (!verifierBinary.exists() || verifierBinary.isDirectory()) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Verifier binary doesn't exist.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try {
                    Map<String, String> map = (Map<String, String>) EDACCApp.getApplication().getContext().getLocalStorage().load(generatepackage_settings_filename);
                    if (map == null) {
                        map = new HashMap<String, String>();
                    }
                    map.put("verifier_binary_location", txtVerifierLocation.getText());
                    EDACCApp.getApplication().getContext().getLocalStorage().save(map, generatepackage_settings_filename);
                } catch (IOException ex) {
                }
            }
            String location = packageFileChooser.getSelectedFile().getAbsolutePath() + System.getProperty("file.separator");
            Tasks.startTask("generatePackage", new Class[]{String.class, boolean.class, boolean.class, boolean.class, boolean.class, boolean.class, boolean.class, File.class, File.class, edacc.model.Tasks.class}, new Object[]{location, chkInstances.isSelected(), chkSolvers.isSelected(), chkClient.isSelected(), chkRunsolver.isSelected(), chkConfig.isSelected(), chkVerifier.isSelected(), clientBinary, verifierBinary, null}, expController, this);
            dispose();
        } else if (evt.getActionCommand().equals("CancelSelection")) {
            dispose();
        }
    }//GEN-LAST:event_packageFileChooserActionPerformed

    private void btnChooseClientBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseClientBinaryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(txtClientLocation.getText()).getParentFile());
        fileChooser.showOpenDialog(EDACCApp.getApplication().getMainFrame());
        if (fileChooser.getSelectedFile() != null) {
            txtClientLocation.setText(fileChooser.getSelectedFile().getPath());
        }

    }//GEN-LAST:event_btnChooseClientBinaryActionPerformed

    private void btnChooseVerifierBinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseVerifierBinaryActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(txtVerifierLocation.getText()).getParentFile());
        fileChooser.showOpenDialog(EDACCApp.getApplication().getMainFrame());
        if (fileChooser.getSelectedFile() != null) {
            txtVerifierLocation.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnChooseVerifierBinaryActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseClientBinary;
    private javax.swing.JButton btnChooseVerifierBinary;
    private javax.swing.JCheckBox chkClient;
    private javax.swing.JCheckBox chkConfig;
    private javax.swing.JCheckBox chkInstances;
    private javax.swing.JCheckBox chkRunsolver;
    private javax.swing.JCheckBox chkSolvers;
    private javax.swing.JCheckBox chkVerifier;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JFileChooser packageFileChooser;
    private javax.swing.JTextField txtClientLocation;
    private javax.swing.JTextField txtVerifierLocation;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onTaskSuccessful(String methodName, Object result) {
    }

    @Override
    public void onTaskStart(String methodName) {
    }

    @Override
    public void onTaskFailed(String methodName, Throwable e) {
        if (methodName.equals("generatePackage")) {
            javax.swing.JOptionPane.showMessageDialog(null, "Excpetion during package generation:\n\n" + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
}
