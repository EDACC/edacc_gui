/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EDACCManagePropertyDialog.java
 *
 * Created on 07.09.2010, 14:37:06
 */

package edacc;

import edacc.model.NoConnectionToDBException;
import edacc.model.Property;
import edacc.model.PropertyHasParameter;
import edacc.model.PropertyHasParameterNotInDBException;
import edacc.model.PropertyIsUsedException;
import edacc.model.PropertyNotInDBException;
import edacc.model.PropertyTypeDoesNotExistException;
import edacc.properties.PropertyController;
import edacc.properties.SolverPropertyTableModel;
import edacc.properties.SolverPropertyTableSelectionListener;
import edacc.properties.PropertySource;
import edacc.properties.SolverPropertyTypeNotExistException;
import java.awt.Component;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author rretz
 */
public class EDACCManagePropertyDialog extends javax.swing.JDialog {
    private PropertyController controller;
    private SolverPropertyTableModel solPropertyTableModel;
    private PropertySource[] comboBoxSolPropType = {PropertySource.LauncherOutput, PropertySource.Parameter, PropertySource.SolverOutput, PropertySource.VerifierOutput, PropertySource.WatcherOutput};
    private EDACCManagePropertyValueTypesDialog PropertyValueTypesDialog;
    private boolean editing = false;

    /** Creates new form EDACCManagePropertyDialog */
    public EDACCManagePropertyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         controller = new PropertyController(this, panelManageSolverProperty, tableSolverProperty);
        // initialize tableSolverProperty
        solPropertyTableModel = new SolverPropertyTableModel();
        tableSolverProperty.setModel(solPropertyTableModel);
        tableSolverProperty.getSelectionModel().addListSelectionListener(new SolverPropertyTableSelectionListener(tableSolverProperty, controller));
           
        // Adding new ColumnModel for the suitable representation of boolen values in the table.
        tableSolverProperty.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel lbl = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                lbl.setHorizontalAlignment(JLabel.CENTER);
                return lbl;
            }
        });

       
        
        // initialize comboBoxPropertySource
        for(int i = 0; i < comboBoxSolPropType.length; i++){
            comboBoxPropertySource.addItem(comboBoxSolPropType[i]);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelManageSolverProperty = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panelMangeSolverPropertyShow = new javax.swing.JPanel();
        panelManageSolverPropertyShowButtons = new javax.swing.JPanel();
        buttonNewSolverProperty = new javax.swing.JButton();
        buttonRemoveSolverProperty = new javax.swing.JButton();
        panelManageSolverPropertyTable = new javax.swing.JScrollPane();
        tableSolverProperty = new javax.swing.JTable();
        panelManageSolverPropertyEdit = new javax.swing.JPanel();
        panelManageSolverPropertyEditInput = new javax.swing.JPanel();
        textSolverPropertyFieldName = new javax.swing.JTextField();
        labelSolverPropertyname = new javax.swing.JLabel();
        textSolvertPropertyFieldPrefix = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaResultPropertyDescription = new javax.swing.JTextArea();
        labelSolverPropertyDescription = new javax.swing.JLabel();
        comboBoxPropertyValuetype = new javax.swing.JComboBox();
        labelPropertyValueType = new javax.swing.JLabel();
        buttonPropertyAddValueType = new javax.swing.JButton();
        labelPropertySource = new javax.swing.JLabel();
        comboBoxPropertySource = new javax.swing.JComboBox();
        labeMultipleOccurrences = new javax.swing.JLabel();
        checkBoxMultipleOccurrences = new javax.swing.JCheckBox();
        comboBoxPropertyType = new javax.swing.JComboBox();
        labelPropertyType = new javax.swing.JLabel();
        comboBoxComputationMethod = new javax.swing.JComboBox();
        buttonNewComputationMethod = new javax.swing.JButton();
        radioBtnRegExpression = new javax.swing.JRadioButton();
        radioBtnComputationMethod = new javax.swing.JRadioButton();
        labelComputationMethodParameters = new javax.swing.JLabel();
        textFieldComputationmethodParameter = new javax.swing.JTextField();
        buttonSaveSolverProperty = new javax.swing.JButton();
        buttonDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCManagePropertyDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setUndecorated(true);

        panelManageSolverProperty.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelManageSolverProperty.border.title"))); // NOI18N
        panelManageSolverProperty.setName("panelManageSolverProperty"); // NOI18N

        jSplitPane1.setDividerLocation(260);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.8);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        panelMangeSolverPropertyShow.setName("panelMangeSolverPropertyShow"); // NOI18N

        panelManageSolverPropertyShowButtons.setName("panelManageSolverPropertyShowButtons"); // NOI18N

        buttonNewSolverProperty.setText(resourceMap.getString("buttonNewSolverProperty.text")); // NOI18N
        buttonNewSolverProperty.setName("buttonNewSolverProperty"); // NOI18N
        buttonNewSolverProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewSolverPropertyActionPerformed(evt);
            }
        });

        buttonRemoveSolverProperty.setText(resourceMap.getString("buttonRemoveSolverProperty.text")); // NOI18N
        buttonRemoveSolverProperty.setName("buttonRemoveSolverProperty"); // NOI18N
        buttonRemoveSolverProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveSolverPropertyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelManageSolverPropertyShowButtonsLayout = new javax.swing.GroupLayout(panelManageSolverPropertyShowButtons);
        panelManageSolverPropertyShowButtons.setLayout(panelManageSolverPropertyShowButtonsLayout);
        panelManageSolverPropertyShowButtonsLayout.setHorizontalGroup(
            panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyShowButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonNewSolverProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemoveSolverProperty)
                .addContainerGap(667, Short.MAX_VALUE))
        );
        panelManageSolverPropertyShowButtonsLayout.setVerticalGroup(
            panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyShowButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNewSolverProperty)
                    .addComponent(buttonRemoveSolverProperty))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelManageSolverPropertyTable.setName("panelManageSolverPropertyTable"); // NOI18N

        tableSolverProperty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSolverProperty.setFocusTraversalPolicyProvider(true);
        tableSolverProperty.setName("tableSolverProperty"); // NOI18N
        tableSolverProperty.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        panelManageSolverPropertyTable.setViewportView(tableSolverProperty);

        javax.swing.GroupLayout panelMangeSolverPropertyShowLayout = new javax.swing.GroupLayout(panelMangeSolverPropertyShow);
        panelMangeSolverPropertyShow.setLayout(panelMangeSolverPropertyShowLayout);
        panelMangeSolverPropertyShowLayout.setHorizontalGroup(
            panelMangeSolverPropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMangeSolverPropertyShowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMangeSolverPropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelManageSolverPropertyTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
                    .addComponent(panelManageSolverPropertyShowButtons, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMangeSolverPropertyShowLayout.setVerticalGroup(
            panelMangeSolverPropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMangeSolverPropertyShowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManageSolverPropertyTable, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelManageSolverPropertyShowButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(panelMangeSolverPropertyShow);

        panelManageSolverPropertyEdit.setName("panelManageSolverPropertyEdit"); // NOI18N

        panelManageSolverPropertyEditInput.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelManageSolverPropertyEditInput.setName("panelManageSolverPropertyEditInput"); // NOI18N

        textSolverPropertyFieldName.setEnabled(false);
        textSolverPropertyFieldName.setName("textSolverPropertyFieldName"); // NOI18N

        labelSolverPropertyname.setText(resourceMap.getString("labelSolverPropertyname.text")); // NOI18N
        labelSolverPropertyname.setName("labelSolverPropertyname"); // NOI18N

        textSolvertPropertyFieldPrefix.setEnabled(false);
        textSolvertPropertyFieldPrefix.setName("textSolvertPropertyFieldPrefix"); // NOI18N

        jScrollPane1.setEnabled(false);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        textAreaResultPropertyDescription.setColumns(20);
        textAreaResultPropertyDescription.setRows(4);
        textAreaResultPropertyDescription.setWrapStyleWord(true);
        textAreaResultPropertyDescription.setEnabled(false);
        textAreaResultPropertyDescription.setName("textAreaResultPropertyDescription"); // NOI18N
        jScrollPane1.setViewportView(textAreaResultPropertyDescription);

        labelSolverPropertyDescription.setText(resourceMap.getString("labelSolverPropertyDescription.text")); // NOI18N
        labelSolverPropertyDescription.setName("labelSolverPropertyDescription"); // NOI18N

        comboBoxPropertyValuetype.setEnabled(false);
        comboBoxPropertyValuetype.setName("comboBoxPropertyValuetype"); // NOI18N

        labelPropertyValueType.setText(resourceMap.getString("labelPropertyValueType.text")); // NOI18N
        labelPropertyValueType.setName("labelPropertyValueType"); // NOI18N

        buttonPropertyAddValueType.setText(resourceMap.getString("buttonPropertyAddValueType.text")); // NOI18N
        buttonPropertyAddValueType.setEnabled(false);
        buttonPropertyAddValueType.setName("buttonPropertyAddValueType"); // NOI18N
        buttonPropertyAddValueType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPropertyAddValueTypeActionPerformed(evt);
            }
        });

        labelPropertySource.setText(resourceMap.getString("labelPropertySource.text")); // NOI18N
        labelPropertySource.setName("labelPropertySource"); // NOI18N

        comboBoxPropertySource.setEnabled(false);
        comboBoxPropertySource.setName("comboBoxPropertySource"); // NOI18N
        comboBoxPropertySource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPropertySourceActionPerformed(evt);
            }
        });

        labeMultipleOccurrences.setText(resourceMap.getString("labeMultipleOccurrences.text")); // NOI18N
        labeMultipleOccurrences.setName("labeMultipleOccurrences"); // NOI18N

        checkBoxMultipleOccurrences.setText(resourceMap.getString("checkBoxMultipleOccurrences.text")); // NOI18N
        checkBoxMultipleOccurrences.setEnabled(false);
        checkBoxMultipleOccurrences.setName("checkBoxMultipleOccurrences"); // NOI18N

        comboBoxPropertyType.setName("comboBoxPropertyType"); // NOI18N

        labelPropertyType.setText(resourceMap.getString("labelPropertyType.text")); // NOI18N
        labelPropertyType.setName("labelPropertyType"); // NOI18N

        comboBoxComputationMethod.setName("comboBoxComputationMethod"); // NOI18N

        buttonNewComputationMethod.setText(resourceMap.getString("buttonNewComputationMethod.text")); // NOI18N
        buttonNewComputationMethod.setName("buttonNewComputationMethod"); // NOI18N

        radioBtnRegExpression.setText(resourceMap.getString("radioBtnRegExpression.text")); // NOI18N
        radioBtnRegExpression.setName("radioBtnRegExpression"); // NOI18N

        radioBtnComputationMethod.setText(resourceMap.getString("radioBtnComputationMethod.text")); // NOI18N
        radioBtnComputationMethod.setName("radioBtnComputationMethod"); // NOI18N

        labelComputationMethodParameters.setText(resourceMap.getString("labelComputationMethodParameters.text")); // NOI18N
        labelComputationMethodParameters.setName("labelComputationMethodParameters"); // NOI18N

        textFieldComputationmethodParameter.setText(resourceMap.getString("textFieldComputationmethodParameter.text")); // NOI18N
        textFieldComputationmethodParameter.setName("textFieldComputationmethodParameter"); // NOI18N

        javax.swing.GroupLayout panelManageSolverPropertyEditInputLayout = new javax.swing.GroupLayout(panelManageSolverPropertyEditInput);
        panelManageSolverPropertyEditInput.setLayout(panelManageSolverPropertyEditInputLayout);
        panelManageSolverPropertyEditInputLayout.setHorizontalGroup(
            panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyEditInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPropertyType)
                    .addComponent(labelSolverPropertyname)
                    .addComponent(labelSolverPropertyDescription)
                    .addComponent(radioBtnRegExpression)
                    .addComponent(radioBtnComputationMethod)
                    .addComponent(labelPropertySource)
                    .addComponent(labelPropertyValueType)
                    .addComponent(labeMultipleOccurrences))
                .addGap(27, 27, 27)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxMultipleOccurrences)
                    .addGroup(panelManageSolverPropertyEditInputLayout.createSequentialGroup()
                        .addComponent(comboBoxPropertyValuetype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonPropertyAddValueType))
                    .addComponent(comboBoxPropertySource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelManageSolverPropertyEditInputLayout.createSequentialGroup()
                        .addComponent(comboBoxComputationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonNewComputationMethod)
                        .addGap(18, 18, 18)
                        .addComponent(labelComputationMethodParameters)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldComputationmethodParameter, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                    .addComponent(comboBoxPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSolverPropertyFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addComponent(textSolvertPropertyFieldPrefix, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelManageSolverPropertyEditInputLayout.setVerticalGroup(
            panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyEditInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertyType)
                    .addComponent(comboBoxPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSolverPropertyname)
                    .addComponent(textSolverPropertyFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSolverPropertyDescription)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSolvertPropertyFieldPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioBtnRegExpression))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtnComputationMethod)
                    .addComponent(comboBoxComputationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNewComputationMethod)
                    .addComponent(labelComputationMethodParameters)
                    .addComponent(textFieldComputationmethodParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertySource)
                    .addComponent(comboBoxPropertySource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertyValueType)
                    .addComponent(comboBoxPropertyValuetype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPropertyAddValueType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelManageSolverPropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labeMultipleOccurrences)
                    .addComponent(checkBoxMultipleOccurrences))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonSaveSolverProperty.setText(resourceMap.getString("buttonSaveSolverProperty.text")); // NOI18N
        buttonSaveSolverProperty.setEnabled(false);
        buttonSaveSolverProperty.setName("buttonSaveSolverProperty"); // NOI18N
        buttonSaveSolverProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveSolverPropertyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelManageSolverPropertyEditLayout = new javax.swing.GroupLayout(panelManageSolverPropertyEdit);
        panelManageSolverPropertyEdit.setLayout(panelManageSolverPropertyEditLayout);
        panelManageSolverPropertyEditLayout.setHorizontalGroup(
            panelManageSolverPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageSolverPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelManageSolverPropertyEditInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonSaveSolverProperty))
                .addContainerGap())
        );
        panelManageSolverPropertyEditLayout.setVerticalGroup(
            panelManageSolverPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelManageSolverPropertyEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManageSolverPropertyEditInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(buttonSaveSolverProperty)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(panelManageSolverPropertyEdit);

        javax.swing.GroupLayout panelManageSolverPropertyLayout = new javax.swing.GroupLayout(panelManageSolverProperty);
        panelManageSolverProperty.setLayout(panelManageSolverPropertyLayout);
        panelManageSolverPropertyLayout.setHorizontalGroup(
            panelManageSolverPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelManageSolverPropertyLayout.setVerticalGroup(
            panelManageSolverPropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        buttonDone.setText(resourceMap.getString("buttonDone.text")); // NOI18N
        buttonDone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        buttonDone.setName("buttonDone"); // NOI18N
        buttonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelManageSolverProperty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDone, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManageSolverProperty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDone, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNewSolverPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewSolverPropertyActionPerformed
        this.editing = false;
        controller.NewSolverProperty();
}//GEN-LAST:event_buttonNewSolverPropertyActionPerformed

    private void buttonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDoneActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_buttonDoneActionPerformed

    private void comboBoxPropertySourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPropertySourceActionPerformed
        controller.SolverPropertyTypeChanged();
    }//GEN-LAST:event_comboBoxPropertySourceActionPerformed

    private void buttonPropertyAddValueTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPropertyAddValueTypeActionPerformed
      if(PropertyValueTypesDialog == null){
            JFrame mainFrame = EDACCApp.getApplication().getMainFrame();
            PropertyValueTypesDialog = new EDACCManagePropertyValueTypesDialog(mainFrame, true);
            PropertyValueTypesDialog.setLocationRelativeTo(mainFrame);
            PropertyValueTypesDialog.initialize();
      }
      PropertyValueTypesDialog.setVisible(true);
    }//GEN-LAST:event_buttonPropertyAddValueTypeActionPerformed

    private void buttonRemoveSolverPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveSolverPropertyActionPerformed
        if(tableSolverProperty.getSelectedRow() == -1){
                 JOptionPane.showMessageDialog(this,
                "Nothing is selected. Select a solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            }else{
            try {
                try {
                    controller.removeSolverProperty(tableSolverProperty.convertRowIndexToModel(tableSolverProperty.getSelectedRow()));
                } catch (PropertyTypeDoesNotExistException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PropertyHasParameterNotInDBException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PropertyNotInDBException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SolverPropertyTypeNotExistException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (NoConnectionToDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyIsUsedException ex) {
                JOptionPane.showMessageDialog(this,
                "Cannot delete the solver property, because it's already in use.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            }
            }
    }//GEN-LAST:event_buttonRemoveSolverPropertyActionPerformed

    private void buttonSaveSolverPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveSolverPropertyActionPerformed
        if(textSolverPropertyFieldName.getText().equals("")){
            JOptionPane.showMessageDialog(this,
                "You must specify a name for the solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else if(textSolvertPropertyFieldPrefix.getText().equals("")){
            JOptionPane.showMessageDialog(this,
                "You must specify a prefix for the solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else if(comboBoxPropertySource.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this,
                "You must select a solver property type for the solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else if(!comboBoxPropertySource.getSelectedItem().equals(PropertySource.Parameter) && comboBoxPropertyValuetype.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this,
                "You must select a  property value type for the solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else if(comboBoxPropertySource.getSelectedItem().equals(PropertySource.Parameter) && comboBoxParameter.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this,
                "You must select a  parameter for the solver property.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else{
            try {
                if(!comboBoxPropertySource.getSelectedItem().equals(PropertySource.Parameter)){
                     controller.saveSolverProperty(textSolverPropertyFieldName.getText(), textSolvertPropertyFieldPrefix.getText(), textAreaResultPropertyDescription.getText(),
                    (PropertySource) comboBoxPropertySource.getSelectedItem(), (String) comboBoxPropertyValuetype.getSelectedItem(),
                    checkBoxMultipleOccurrences.isSelected());
                } else{
                    try {
                        controller.saveSolverProperty(textSolverPropertyFieldName.getText(), textSolvertPropertyFieldPrefix.getText(), textAreaResultPropertyDescription.getText(), (PropertySource) comboBoxPropertySource.getSelectedItem(), (String) comboBoxParameter.getSelectedItem());
                    } catch (PropertyTypeDoesNotExistException ex) {
                        Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (PropertyHasParameterNotInDBException ex) {
                        Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            } catch (NoConnectionToDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "A database error occurred. " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            } catch (PropertyNotInDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SolverPropertyTypeNotExistException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyIsUsedException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonSaveSolverPropertyActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EDACCManagePropertyDialog dialog = new EDACCManagePropertyDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDone;
    private javax.swing.JButton buttonNewComputationMethod;
    private javax.swing.JButton buttonNewSolverProperty;
    private javax.swing.JButton buttonPropertyAddValueType;
    private javax.swing.JButton buttonRemoveSolverProperty;
    private javax.swing.JButton buttonSaveSolverProperty;
    private javax.swing.JCheckBox checkBoxMultipleOccurrences;
    private javax.swing.JComboBox comboBoxComputationMethod;
    private javax.swing.JComboBox comboBoxPropertySource;
    private javax.swing.JComboBox comboBoxPropertyType;
    private javax.swing.JComboBox comboBoxPropertyValuetype;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labeMultipleOccurrences;
    private javax.swing.JLabel labelComputationMethodParameters;
    private javax.swing.JLabel labelPropertySource;
    private javax.swing.JLabel labelPropertyType;
    private javax.swing.JLabel labelPropertyValueType;
    private javax.swing.JLabel labelSolverPropertyDescription;
    private javax.swing.JLabel labelSolverPropertyname;
    private javax.swing.JPanel panelManageSolverProperty;
    private javax.swing.JPanel panelManageSolverPropertyEdit;
    private javax.swing.JPanel panelManageSolverPropertyEditInput;
    private javax.swing.JPanel panelManageSolverPropertyShowButtons;
    private javax.swing.JScrollPane panelManageSolverPropertyTable;
    private javax.swing.JPanel panelMangeSolverPropertyShow;
    private javax.swing.JRadioButton radioBtnComputationMethod;
    private javax.swing.JRadioButton radioBtnRegExpression;
    private javax.swing.JTable tableSolverProperty;
    private javax.swing.JTextArea textAreaResultPropertyDescription;
    private javax.swing.JTextField textFieldComputationmethodParameter;
    private javax.swing.JTextField textSolverPropertyFieldName;
    private javax.swing.JTextField textSolvertPropertyFieldPrefix;
    // End of variables declaration//GEN-END:variables

    public void enableSolverPropertyEditField(boolean enable) {
        this.comboBoxPropertySource.setEnabled(enable);
        this.buttonSaveSolverProperty.setEnabled(enable);
        this.textSolvertPropertyFieldPrefix.setEnabled(enable);
        this.textSolverPropertyFieldName.setEnabled(enable);
        this.textAreaResultPropertyDescription.setEnabled(enable);
        this.textSolverPropertyFieldName.requestFocus();
        this.comboBoxPropertyValuetype.setEnabled(enable);
        this.buttonPropertyAddValueType.setEnabled(enable);
        this.checkBoxMultipleOccurrences.setEnabled(enable);
    }

    public void clearSolverPropertyEditField() {
        this.comboBoxPropertySource.setSelectedIndex(0);
        if(this.comboBoxPropertyValuetype.getItemCount() != 0)
            this.comboBoxPropertyValuetype.setSelectedIndex(0);
        this.checkBoxMultipleOccurrences.setSelected(false);
        this.textSolverPropertyFieldName.setText("");
        this.textSolvertPropertyFieldPrefix.setText("");
        this.textAreaResultPropertyDescription.setText("");
    }

    public void SolverPropertyTypeChanged() {
        if(!this.comboBoxPropertySource.getSelectedItem().equals(PropertySource.Parameter) &&
                this.comboBoxPropertySource.isEnabled() && !editing){
            this.comboBoxPropertyValuetype.setEnabled(true);
            this.buttonPropertyAddValueType.setEnabled(true);
            this.checkBoxMultipleOccurrences.setEnabled(true);
            this.buttonSaveSolverProperty.setEnabled(true);
            this.comboBoxParameter.setEnabled(false);
        }else if(this.comboBoxPropertySource.getSelectedItem().equals(PropertySource.Parameter) &&
                this.comboBoxPropertySource.isEnabled() && !editing){
           this.comboBoxPropertyValuetype.setEnabled(false);
           this.buttonPropertyAddValueType.setEnabled(false);
           this.checkBoxMultipleOccurrences.setEnabled(false);
           this.comboBoxParameter.setEnabled(true);
        }
    }

    /**
     * Initialize and chargs the tableSolverPropertys and the comboBoxPropertyValuetype with the corresponding items.
     */
    public void initialize() {
        try {
            controller.loadSolverProperties();
            controller.loadPropertyValueTypes();
            controller.loadParameters();
        } catch (NoConnectionToDBException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PropertyNotInDBException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SolverPropertyTypeNotExistException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Clears all items of the ComboBoxPropertyValueType and add the given items.
     * @param items to add to the combobox
     */
    public void setComboBoxPropertyValueTypesItems(Vector<String> items){
        this.comboBoxPropertyValuetype.removeAllItems();
        for(int i = 0; i < items.size(); i++){
            this.comboBoxPropertyValuetype.addItem(items.get(i));
        }
    }

    /**
     * Fills the input fields with the parameters of the given Property object and activates the input fields.
     * @param toShow the Property object to show.
     */
    public void showSolverProperty(Property toShow){
        this.editing = true;
        this.textSolverPropertyFieldName.setText(toShow.getName());
        this.textSolvertPropertyFieldPrefix.setText(toShow.getRegularExpression());
        this.textAreaResultPropertyDescription.setText(toShow.getDescription());
        this.comboBoxPropertySource.setSelectedItem(toShow.getPropertySource());
        if(!toShow.getPropertySource().equals(PropertySource.Parameter)){
            this.comboBoxPropertyValuetype.setSelectedItem(toShow.getPropertyValueType());
            this.checkBoxMultipleOccurrences.setSelected(toShow.isMultiple());
        }
        this.enableEditing();
    }

    public void showSolverProperty(Property toShow, PropertyHasParameter solverPropertyType) {
        this.editing = true;
        this.textSolverPropertyFieldName.setText(toShow.getName());
        this.textSolvertPropertyFieldPrefix.setText(toShow.getRegularExpression());
        this.textAreaResultPropertyDescription.setText(toShow.getDescription());
        this.comboBoxPropertySource.setSelectedItem(toShow.getPropertySource());
        this.comboBoxParameter.setSelectedItem(solverPropertyType.getParameter());
        this.enableEditing();
    }

    private void enableEditing() {
        this.textSolverPropertyFieldName.setEnabled(true);
        this.textSolvertPropertyFieldPrefix.setEnabled(true);
        this.textAreaResultPropertyDescription.setEnabled(true);
        this.buttonSaveSolverProperty.setEnabled(true);
    }

    public void setComboBoxParameters(Vector<String> allNames) {
        this.comboBoxParameter.removeAllItems();
        for(int i = 0; i < allNames.size(); i++){
            this.comboBoxParameter.addItem(allNames.get(i));
        }
    }



}
