/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EDACCManagePropertyDialog.java
 *
 * Created on 07.09.2010, 14:37:06
 */
package edacc;

import edacc.properties.ManagePropertyDialogSourceListener;
import edacc.properties.ManagePropertyDialogTypeListener;
import edacc.model.ComputationMethod;
import edacc.model.ComputationMethodDAO;
import edacc.model.ComputationMethodDoesNotExistException;
import edacc.model.NoConnectionToDBException;
import edacc.model.Property;
import edacc.model.PropertyIsUsedException;
import edacc.model.PropertyNotInDBException;
import edacc.model.PropertyType;
import edacc.model.PropertyTypeDoesNotExistException;
import edacc.properties.ManagePropertyController;
import edacc.properties.PropertyTableModel;
import edacc.properties.PropertyTableSelectionListener;
import edacc.properties.PropertySource;
import edacc.properties.PropertyTypeNotExistException;
import edacc.satinstances.PropertyValueType;
import edacc.satinstances.PropertyValueTypeManager;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author rretz
 */
public class EDACCManagePropertyDialog extends javax.swing.JDialog {

    private ManagePropertyController controller;
    private PropertyTableModel propertyTableModel;
    private PropertySource[] ResultPropertySources = {PropertySource.LauncherOutput, PropertySource.SolverOutput, PropertySource.VerifierOutput, PropertySource.WatcherOutput};
    private PropertySource[] InstancePropertySources = {PropertySource.Instance, PropertySource.InstanceName, PropertySource.ExperimentResults};
    private PropertyType[] propertyTypes = {PropertyType.InstanceProperty, PropertyType.ResultProperty};
    private EDACCManagePropertyValueTypesDialog PropertyValueTypesDialog;
    private boolean editing = false;
    private EDACCManageComputationMethodDialog computationMethodDialog;
    private ManagePropertyDialogSourceListener sourceListener;
    private ManagePropertyDialogTypeListener typeListener;

    /** Creates new form EDACCManagePropertyDialog */
    public EDACCManagePropertyDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        controller = new ManagePropertyController(this, panelManageProperty, tableProperty);

        buttonGroup1.add(radioBtnComputationMethod);
        buttonGroup1.add(radioBtnRegExpression);

        // initialize tableSolverProperty
        propertyTableModel = new PropertyTableModel();
        tableProperty.setModel(propertyTableModel);
        tableProperty.getSelectionModel().addListSelectionListener(new PropertyTableSelectionListener(tableProperty, controller));

        // Adding new ColumnModel for the suitable representation of boolen values in the table.
        tableProperty.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel lbl = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                lbl.setHorizontalAlignment(JLabel.CENTER);
                return lbl;
            }
        });

        sourceListener = new ManagePropertyDialogSourceListener(controller);
        typeListener = new ManagePropertyDialogTypeListener(controller, comboBoxPropertyType);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jFileChooser1 = new javax.swing.JFileChooser();
        panelManageProperty = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panelMangePropertyShow = new javax.swing.JPanel();
        panelManageSolverPropertyShowButtons = new javax.swing.JPanel();
        buttonNewProperty = new javax.swing.JButton();
        buttonRemoveProperty = new javax.swing.JButton();
        buttonExportProperty = new javax.swing.JButton();
        buttonImportProperty = new javax.swing.JButton();
        panelManageSolverPropertyTable = new javax.swing.JScrollPane();
        tableProperty = new javax.swing.JTable();
        panelManagerPropertyEdit = new javax.swing.JPanel();
        panelManagePropertyEditInput = new javax.swing.JPanel();
        textPropertyFieldName = new javax.swing.JTextField();
        labelPropertyname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaPropertyDescription = new javax.swing.JTextArea();
        labelPropertyDescription = new javax.swing.JLabel();
        comboBoxPropertyValuetype = new javax.swing.JComboBox();
        labelPropertyValueType = new javax.swing.JLabel();
        buttonPropertyAddValueType = new javax.swing.JButton();
        labelPropertySource = new javax.swing.JLabel();
        comboBoxPropertySource = new javax.swing.JComboBox();
        labeMultipleOccurrences = new javax.swing.JLabel();
        checkBoxMultipleOccurrences = new javax.swing.JCheckBox();
        comboBoxPropertyType = new javax.swing.JComboBox();
        labelPropertyType = new javax.swing.JLabel();
        comboBoxComputationMethod = new javax.swing.JComboBox();
        buttonNewComputationMethod = new javax.swing.JButton();
        radioBtnRegExpression = new javax.swing.JRadioButton();
        radioBtnComputationMethod = new javax.swing.JRadioButton();
        labelComputationMethodParameters = new javax.swing.JLabel();
        textFieldComputationmethodParameter = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaRegularExpressions = new javax.swing.JTextArea();
        buttonSaveProperty = new javax.swing.JButton();
        buttonDone = new javax.swing.JButton();

        jFileChooser1.setName("jFileChooser1"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCManagePropertyDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setFont(resourceMap.getFont("Form.font")); // NOI18N
        setIconImage(null);
        setName("Form"); // NOI18N

        panelManageProperty.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelManageProperty.border.title"))); // NOI18N
        panelManageProperty.setName("panelManageProperty"); // NOI18N

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.8);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        panelMangePropertyShow.setName("panelMangePropertyShow"); // NOI18N

        panelManageSolverPropertyShowButtons.setName("panelManageSolverPropertyShowButtons"); // NOI18N

        buttonNewProperty.setText(resourceMap.getString("buttonNewProperty.text")); // NOI18N
        buttonNewProperty.setName("buttonNewProperty"); // NOI18N
        buttonNewProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewPropertyActionPerformed(evt);
            }
        });

        buttonRemoveProperty.setText(resourceMap.getString("buttonRemoveProperty.text")); // NOI18N
        buttonRemoveProperty.setName("buttonRemoveProperty"); // NOI18N
        buttonRemoveProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemovePropertyActionPerformed(evt);
            }
        });

        buttonExportProperty.setText(resourceMap.getString("buttonExportProperty.text")); // NOI18N
        buttonExportProperty.setName("buttonExportProperty"); // NOI18N
        buttonExportProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportPropertyActionPerformed(evt);
            }
        });

        buttonImportProperty.setText(resourceMap.getString("buttonImportProperty.text")); // NOI18N
        buttonImportProperty.setName("buttonImportProperty"); // NOI18N
        buttonImportProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportPropertyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelManageSolverPropertyShowButtonsLayout = new javax.swing.GroupLayout(panelManageSolverPropertyShowButtons);
        panelManageSolverPropertyShowButtons.setLayout(panelManageSolverPropertyShowButtonsLayout);
        panelManageSolverPropertyShowButtonsLayout.setHorizontalGroup(
            panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyShowButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonNewProperty, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemoveProperty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonExportProperty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonImportProperty)
                .addContainerGap(510, Short.MAX_VALUE))
        );

        panelManageSolverPropertyShowButtonsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonExportProperty, buttonImportProperty, buttonNewProperty, buttonRemoveProperty});

        panelManageSolverPropertyShowButtonsLayout.setVerticalGroup(
            panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageSolverPropertyShowButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageSolverPropertyShowButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNewProperty)
                    .addComponent(buttonRemoveProperty)
                    .addComponent(buttonExportProperty)
                    .addComponent(buttonImportProperty))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelManageSolverPropertyShowButtonsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonExportProperty, buttonImportProperty, buttonNewProperty, buttonRemoveProperty});

        panelManageSolverPropertyTable.setName("panelManageSolverPropertyTable"); // NOI18N

        tableProperty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProperty.setFocusTraversalPolicyProvider(true);
        tableProperty.setName("tableProperty"); // NOI18N
        tableProperty.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        panelManageSolverPropertyTable.setViewportView(tableProperty);

        javax.swing.GroupLayout panelMangePropertyShowLayout = new javax.swing.GroupLayout(panelMangePropertyShow);
        panelMangePropertyShow.setLayout(panelMangePropertyShowLayout);
        panelMangePropertyShowLayout.setHorizontalGroup(
            panelMangePropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMangePropertyShowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMangePropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelManageSolverPropertyTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                    .addComponent(panelManageSolverPropertyShowButtons, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelMangePropertyShowLayout.setVerticalGroup(
            panelMangePropertyShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMangePropertyShowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManageSolverPropertyTable, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelManageSolverPropertyShowButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(panelMangePropertyShow);

        panelManagerPropertyEdit.setName("panelManagerPropertyEdit"); // NOI18N

        panelManagePropertyEditInput.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelManagePropertyEditInput.setName("panelManagePropertyEditInput"); // NOI18N

        textPropertyFieldName.setEnabled(false);
        textPropertyFieldName.setName("textPropertyFieldName"); // NOI18N

        labelPropertyname.setText(resourceMap.getString("labelPropertyname.text")); // NOI18N
        labelPropertyname.setName("labelPropertyname"); // NOI18N

        jScrollPane1.setEnabled(false);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        textAreaPropertyDescription.setColumns(20);
        textAreaPropertyDescription.setRows(4);
        textAreaPropertyDescription.setWrapStyleWord(true);
        textAreaPropertyDescription.setEnabled(false);
        textAreaPropertyDescription.setName("textAreaPropertyDescription"); // NOI18N
        jScrollPane1.setViewportView(textAreaPropertyDescription);

        labelPropertyDescription.setText(resourceMap.getString("labelPropertyDescription.text")); // NOI18N
        labelPropertyDescription.setName("labelPropertyDescription"); // NOI18N

        comboBoxPropertyValuetype.setEnabled(false);
        comboBoxPropertyValuetype.setName("comboBoxPropertyValuetype"); // NOI18N

        labelPropertyValueType.setText(resourceMap.getString("labelPropertyValueType.text")); // NOI18N
        labelPropertyValueType.setName("labelPropertyValueType"); // NOI18N

        buttonPropertyAddValueType.setText(resourceMap.getString("buttonPropertyAddValueType.text")); // NOI18N
        buttonPropertyAddValueType.setEnabled(false);
        buttonPropertyAddValueType.setName("buttonPropertyAddValueType"); // NOI18N
        buttonPropertyAddValueType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPropertyAddValueTypeActionPerformed(evt);
            }
        });

        labelPropertySource.setText(resourceMap.getString("labelPropertySource.text")); // NOI18N
        labelPropertySource.setName("labelPropertySource"); // NOI18N

        comboBoxPropertySource.setEnabled(false);
        comboBoxPropertySource.setName("comboBoxPropertySource"); // NOI18N
        comboBoxPropertySource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPropertySourceActionPerformed(evt);
            }
        });

        labeMultipleOccurrences.setText(resourceMap.getString("labeMultipleOccurrences.text")); // NOI18N
        labeMultipleOccurrences.setName("labeMultipleOccurrences"); // NOI18N

        checkBoxMultipleOccurrences.setText(resourceMap.getString("checkBoxMultipleOccurrences.text")); // NOI18N
        checkBoxMultipleOccurrences.setEnabled(false);
        checkBoxMultipleOccurrences.setName("checkBoxMultipleOccurrences"); // NOI18N

        comboBoxPropertyType.setEnabled(false);
        comboBoxPropertyType.setName("comboBoxPropertyType"); // NOI18N

        labelPropertyType.setText(resourceMap.getString("labelPropertyType.text")); // NOI18N
        labelPropertyType.setName("labelPropertyType"); // NOI18N

        comboBoxComputationMethod.setEnabled(false);
        comboBoxComputationMethod.setName("comboBoxComputationMethod"); // NOI18N

        buttonNewComputationMethod.setText(resourceMap.getString("buttonNewComputationMethod.text")); // NOI18N
        buttonNewComputationMethod.setEnabled(false);
        buttonNewComputationMethod.setName("buttonNewComputationMethod"); // NOI18N
        buttonNewComputationMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewComputationMethodActionPerformed(evt);
            }
        });

        radioBtnRegExpression.setText(resourceMap.getString("radioBtnRegExpression.text")); // NOI18N
        radioBtnRegExpression.setEnabled(false);
        radioBtnRegExpression.setName("radioBtnRegExpression"); // NOI18N

        radioBtnComputationMethod.setText(resourceMap.getString("radioBtnComputationMethod.text")); // NOI18N
        radioBtnComputationMethod.setEnabled(false);
        radioBtnComputationMethod.setName("radioBtnComputationMethod"); // NOI18N

        labelComputationMethodParameters.setText(resourceMap.getString("labelComputationMethodParameters.text")); // NOI18N
        labelComputationMethodParameters.setName("labelComputationMethodParameters"); // NOI18N

        textFieldComputationmethodParameter.setText(resourceMap.getString("textFieldComputationmethodParameter.text")); // NOI18N
        textFieldComputationmethodParameter.setEnabled(false);
        textFieldComputationmethodParameter.setName("textFieldComputationmethodParameter"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        textAreaRegularExpressions.setColumns(20);
        textAreaRegularExpressions.setRows(5);
        textAreaRegularExpressions.setName("textAreaRegularExpressions"); // NOI18N
        jScrollPane2.setViewportView(textAreaRegularExpressions);

        javax.swing.GroupLayout panelManagePropertyEditInputLayout = new javax.swing.GroupLayout(panelManagePropertyEditInput);
        panelManagePropertyEditInput.setLayout(panelManagePropertyEditInputLayout);
        panelManagePropertyEditInputLayout.setHorizontalGroup(
            panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                        .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPropertyType)
                            .addComponent(labelPropertyname)
                            .addComponent(labelPropertyDescription)
                            .addComponent(labelPropertySource)
                            .addComponent(radioBtnRegExpression)
                            .addComponent(labeMultipleOccurrences)
                            .addComponent(radioBtnComputationMethod))
                        .addGap(50, 50, 50)
                        .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkBoxMultipleOccurrences)
                            .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                                .addComponent(comboBoxComputationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonNewComputationMethod)
                                .addGap(18, 18, 18)
                                .addComponent(labelComputationMethodParameters)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldComputationmethodParameter, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                            .addComponent(textPropertyFieldName, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                            .addComponent(comboBoxPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBoxPropertySource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboBoxPropertyValuetype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonPropertyAddValueType))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)))
                    .addComponent(labelPropertyValueType))
                .addContainerGap())
        );
        panelManagePropertyEditInputLayout.setVerticalGroup(
            panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertyType)
                    .addComponent(comboBoxPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertyname)
                    .addComponent(textPropertyFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPropertySource)
                            .addComponent(comboBoxPropertySource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioBtnRegExpression)))
                    .addComponent(labelPropertyDescription))
                .addGap(18, 18, 18)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxComputationMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioBtnComputationMethod)
                    .addComponent(buttonNewComputationMethod)
                    .addComponent(labelComputationMethodParameters)
                    .addComponent(textFieldComputationmethodParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPropertyValueType)
                    .addComponent(comboBoxPropertyValuetype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPropertyAddValueType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelManagePropertyEditInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labeMultipleOccurrences)
                    .addGroup(panelManagePropertyEditInputLayout.createSequentialGroup()
                        .addComponent(checkBoxMultipleOccurrences)
                        .addContainerGap())))
        );

        buttonSaveProperty.setText(resourceMap.getString("buttonSaveProperty.text")); // NOI18N
        buttonSaveProperty.setEnabled(false);
        buttonSaveProperty.setName("buttonSaveProperty"); // NOI18N
        buttonSaveProperty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSavePropertyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelManagerPropertyEditLayout = new javax.swing.GroupLayout(panelManagerPropertyEdit);
        panelManagerPropertyEdit.setLayout(panelManagerPropertyEditLayout);
        panelManagerPropertyEditLayout.setHorizontalGroup(
            panelManagerPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagerPropertyEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManagerPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelManagePropertyEditInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonSaveProperty))
                .addContainerGap())
        );
        panelManagerPropertyEditLayout.setVerticalGroup(
            panelManagerPropertyEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagerPropertyEditLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManagePropertyEditInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSaveProperty)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(panelManagerPropertyEdit);

        javax.swing.GroupLayout panelManagePropertyLayout = new javax.swing.GroupLayout(panelManageProperty);
        panelManageProperty.setLayout(panelManagePropertyLayout);
        panelManagePropertyLayout.setHorizontalGroup(
            panelManagePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagePropertyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelManagePropertyLayout.setVerticalGroup(
            panelManagePropertyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManagePropertyLayout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonDone.setText(resourceMap.getString("buttonDone.text")); // NOI18N
        buttonDone.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        buttonDone.setName("buttonDone"); // NOI18N
        buttonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelManageProperty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonDone, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelManageProperty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonDone, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonNewPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewPropertyActionPerformed
        this.editing = false;
        controller.NewProperty();
        comboBoxPropertyType.setSelectedIndex(1);
        comboBoxPropertyType.setSelectedIndex(0);
}//GEN-LAST:event_buttonNewPropertyActionPerformed

    private void buttonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDoneActionPerformed
        this.setVisible(false);
        clearPropertyEditField();
        doEnable(false);
    }//GEN-LAST:event_buttonDoneActionPerformed

    private void comboBoxPropertySourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPropertySourceActionPerformed
    }//GEN-LAST:event_comboBoxPropertySourceActionPerformed

    private void buttonPropertyAddValueTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPropertyAddValueTypeActionPerformed
        if (PropertyValueTypesDialog == null) {
            JFrame mainFrame = EDACCApp.getApplication().getMainFrame();
            PropertyValueTypesDialog = new EDACCManagePropertyValueTypesDialog(mainFrame, true, this);
            PropertyValueTypesDialog.setLocationRelativeTo(mainFrame);
            PropertyValueTypesDialog.initialize();
        }
        PropertyValueTypesDialog.setVisible(true);
    }//GEN-LAST:event_buttonPropertyAddValueTypeActionPerformed

    private void buttonRemovePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemovePropertyActionPerformed
        if (tableProperty.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this,
                    "Nothing is selected. Select a solver property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                try {
                    controller.removeProperty(tableProperty.convertRowIndexToModel(tableProperty.getSelectedRow()));

                } catch (PropertyTypeDoesNotExistException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PropertyNotInDBException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (PropertyTypeNotExistException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ComputationMethodDoesNotExistException ex) {
                    Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (NoConnectionToDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyIsUsedException ex) {
                JOptionPane.showMessageDialog(this,
                        "Cannot delete the solver property, because it's already in use.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_buttonRemovePropertyActionPerformed

    private void buttonSavePropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePropertyActionPerformed
        if (comboBoxPropertyType.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this,
                    "You must specify the type of the property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        if (textPropertyFieldName.getText().equals("")) {
            JOptionPane.showMessageDialog(this,
                    "You must specify a name for the property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if ((textAreaRegularExpressions.getText().equals("") && comboBoxComputationMethod.getSelectedIndex() == -1)
                || (radioBtnComputationMethod.isSelected() && comboBoxComputationMethod.getSelectedIndex() == -1)
                || (radioBtnRegExpression.isSelected() && textAreaRegularExpressions.getText().equals(""))
                || (!radioBtnComputationMethod.isSelected() && !radioBtnRegExpression.isSelected())) {
            JOptionPane.showMessageDialog(this,
                    "You must specify a regular expression or choose a computation method for the property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (comboBoxPropertySource.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this,
                    "You must select a source for the property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (comboBoxPropertyValuetype.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this,
                    "You must select a  property value type for the property.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                if (radioBtnRegExpression.isSelected()) {
                    controller.saveProperty(textPropertyFieldName.getText(), textAreaPropertyDescription.getText(), (PropertyType) comboBoxPropertyType.getSelectedItem(), textAreaRegularExpressions.getText(), null, "", (PropertySource) comboBoxPropertySource.getSelectedItem(), (PropertyValueType<?>) PropertyValueTypeManager.getInstance().getPropertyValueTypeByName((String) comboBoxPropertyValuetype.getSelectedItem()), checkBoxMultipleOccurrences.isSelected());
                } else if (radioBtnComputationMethod.isSelected()) {
                    controller.saveProperty(textPropertyFieldName.getText(), textAreaPropertyDescription.getText(), (PropertyType) comboBoxPropertyType.getSelectedItem(), "", (ComputationMethod) ComputationMethodDAO.getByName((String) comboBoxComputationMethod.getSelectedItem()), textFieldComputationmethodParameter.getText(), (PropertySource) comboBoxPropertySource.getSelectedItem(), (PropertyValueType<?>) PropertyValueTypeManager.getInstance().getPropertyValueTypeByName((String) comboBoxPropertyValuetype.getSelectedItem()), checkBoxMultipleOccurrences.isSelected());
                }
            } catch (IOException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoConnectionToDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyIsUsedException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyTypeDoesNotExistException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyNotInDBException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyTypeNotExistException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ComputationMethodDoesNotExistException ex) {
                Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonSavePropertyActionPerformed

    private void buttonNewComputationMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewComputationMethodActionPerformed
        if (computationMethodDialog == null) {
            computationMethodDialog = new EDACCManageComputationMethodDialog(EDACCApp.getApplication().getMainFrame(), true, this);
            computationMethodDialog.setLocationRelativeTo(this);
        }
        computationMethodDialog.initialize();
        computationMethodDialog.setVisible(true);
    }//GEN-LAST:event_buttonNewComputationMethodActionPerformed

    /**
     * Shows an FileChooser, in which the user can delcare the directory to which the selected properties
     * have to be exported. If no property is selected, an messageDialog is shown.
     * @param evt 
     */
    private void buttonExportPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportPropertyActionPerformed
        if (this.tableProperty.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this,
                    "No Property is selected. Select one or more of the Properties in the table.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {

            jFileChooser1.setFileSelectionMode(jFileChooser1.DIRECTORIES_ONLY);
            int returnVal = jFileChooser1.showOpenDialog(this);
            if (returnVal == jFileChooser1.CANCEL_OPTION) {
                return;
            }

            String path = jFileChooser1.getSelectedFile().getAbsolutePath();
            int[] selectedRows = tableProperty.getSelectedRows();
            for (int i = 0; i < selectedRows.length; i++) {
                selectedRows[i] = tableProperty.convertRowIndexToModel(selectedRows[i]);
            }
            controller.exportProperty(selectedRows, path);

        }

    }//GEN-LAST:event_buttonExportPropertyActionPerformed
    private void buttonImportPropertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportPropertyActionPerformed
        jFileChooser1.setFileSelectionMode(jFileChooser1.FILES_ONLY);
        jFileChooser1.setMultiSelectionEnabled(true);
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == jFileChooser1.CANCEL_OPTION) {
            return;
        }
        File[] files = jFileChooser1.getSelectedFiles();
        controller.importProperty(files);
    }//GEN-LAST:event_buttonImportPropertyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                EDACCManagePropertyDialog dialog = new EDACCManagePropertyDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDone;
    private javax.swing.JButton buttonExportProperty;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonImportProperty;
    private javax.swing.JButton buttonNewComputationMethod;
    private javax.swing.JButton buttonNewProperty;
    private javax.swing.JButton buttonPropertyAddValueType;
    private javax.swing.JButton buttonRemoveProperty;
    private javax.swing.JButton buttonSaveProperty;
    private javax.swing.JCheckBox checkBoxMultipleOccurrences;
    private javax.swing.JComboBox comboBoxComputationMethod;
    private javax.swing.JComboBox comboBoxPropertySource;
    private javax.swing.JComboBox comboBoxPropertyType;
    private javax.swing.JComboBox comboBoxPropertyValuetype;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labeMultipleOccurrences;
    private javax.swing.JLabel labelComputationMethodParameters;
    private javax.swing.JLabel labelPropertyDescription;
    private javax.swing.JLabel labelPropertySource;
    private javax.swing.JLabel labelPropertyType;
    private javax.swing.JLabel labelPropertyValueType;
    private javax.swing.JLabel labelPropertyname;
    private javax.swing.JPanel panelManageProperty;
    private javax.swing.JPanel panelManagePropertyEditInput;
    private javax.swing.JPanel panelManageSolverPropertyShowButtons;
    private javax.swing.JScrollPane panelManageSolverPropertyTable;
    private javax.swing.JPanel panelManagerPropertyEdit;
    private javax.swing.JPanel panelMangePropertyShow;
    private javax.swing.JRadioButton radioBtnComputationMethod;
    private javax.swing.JRadioButton radioBtnRegExpression;
    private javax.swing.JTable tableProperty;
    private javax.swing.JTextArea textAreaPropertyDescription;
    private javax.swing.JTextArea textAreaRegularExpressions;
    private javax.swing.JTextField textFieldComputationmethodParameter;
    private javax.swing.JTextField textPropertyFieldName;
    // End of variables declaration//GEN-END:variables

    public void clearPropertyEditField() {
        this.comboBoxPropertyType.setSelectedIndex(0);
        if (this.comboBoxPropertySource.getItemCount() != 0) {
            this.comboBoxPropertySource.setSelectedIndex(0);
        }
        if (this.comboBoxPropertyValuetype.getItemCount() != 0) {
            this.comboBoxPropertyValuetype.setSelectedIndex(0);
        }
        if (this.comboBoxComputationMethod.getItemCount() != 0) {
            this.comboBoxComputationMethod.setSelectedIndex(0);
        }
        this.checkBoxMultipleOccurrences.setSelected(false);
        comboBoxPropertySource.removeItemListener(sourceListener);
        this.comboBoxPropertySource.removeAllItems();
        this.textAreaPropertyDescription.setText("");
        this.textFieldComputationmethodParameter.setText("");
        this.textAreaRegularExpressions.setText("");
        this.textPropertyFieldName.setText("");
        this.radioBtnComputationMethod.setSelected(false);
        this.radioBtnRegExpression.setSelected(false);
    }

    public void propertySourceChanged() {
        if (this.comboBoxPropertySource.isEnabled() && this.comboBoxPropertyType.getSelectedItem().equals(PropertyType.InstanceProperty)
                && !editing) {
            if (this.comboBoxPropertySource.getSelectedItem().equals(PropertySource.InstanceName)) {
                this.radioBtnRegExpression.setEnabled(true);
                this.radioBtnRegExpression.setSelected(true);
                this.textAreaRegularExpressions.setEnabled(true);
                radioBtnComputationMethod.setEnabled(false);
                buttonNewComputationMethod.setEnabled(false);
                textFieldComputationmethodParameter.setEnabled(false);
                comboBoxComputationMethod.setEnabled(false);
            } else if (this.comboBoxPropertySource.getSelectedItem().equals(PropertySource.Instance)) {
                this.radioBtnComputationMethod.setEnabled(true);
                this.radioBtnRegExpression.setEnabled(true);
                this.textAreaRegularExpressions.setEnabled(true);
                this.textFieldComputationmethodParameter.setEnabled(true);
                this.buttonNewComputationMethod.setEnabled(true);
                comboBoxComputationMethod.setEnabled(true);
            } else if (this.comboBoxPropertySource.getSelectedItem().equals(PropertySource.ExperimentResults)) {
                this.radioBtnComputationMethod.setEnabled(true);
                this.radioBtnRegExpression.setEnabled(false);
                this.textAreaRegularExpressions.setEnabled(false);
                this.textFieldComputationmethodParameter.setEnabled(true);
                this.buttonNewComputationMethod.setEnabled(true);
                comboBoxComputationMethod.setEnabled(true);
            }
            checkBoxMultipleOccurrences.setEnabled(false);
        } else if (this.comboBoxPropertySource.isEnabled() && this.comboBoxPropertyType.getSelectedItem().equals(PropertyType.ResultProperty)
                && !editing) {
            this.radioBtnComputationMethod.setEnabled(true);
            this.radioBtnRegExpression.setEnabled(true);
            this.textAreaRegularExpressions.setEnabled(true);
            this.textFieldComputationmethodParameter.setEnabled(true);
            this.buttonNewComputationMethod.setEnabled(true);
            comboBoxComputationMethod.setEnabled(true);
        }
    }

    /**
     * Initialize and chargs the tableSolverPropertys and the comboBoxPropertyValuetype with the corresponding items.
     */
    public void initialize() {
        try {
            // Initialize the comboBoxPropertyType
            doEnable(false);
            comboBoxPropertyType.removeAllItems();
            for (int i = 0; i < propertyTypes.length; i++) {
                this.comboBoxPropertyType.addItem(propertyTypes[i]);
            }
            controller.loadProperties();
            controller.loadPropertyValueTypes();
            loadComputationMethods();
            comboBoxPropertyType.addItemListener(typeListener);
            clearPropertyEditField();



        } catch (SQLException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ComputationMethodDoesNotExistException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PropertyNotInDBException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (PropertyTypeNotExistException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Clears all items of the ComboBoxPropertyValueType and add the given items.
     * @param items to add to the combobox
     */
    public void setComboBoxPropertyValueTypesItems(Vector<String> items) {
        this.comboBoxPropertyValuetype.removeAllItems();
        for (int i = 0; i < items.size(); i++) {
            this.comboBoxPropertyValuetype.addItem(items.get(i));
        }
    }

    public void showPropertyTypeSelection() {
        this.comboBoxPropertyType.setEnabled(true);
        this.buttonSaveProperty.setEnabled(true);
    }

    public void propertyTypeChanged() {
        if (this.comboBoxPropertyType.isEnabled() && this.comboBoxPropertyType.getSelectedItem().equals(PropertyType.InstanceProperty)
                && !editing) {
            this.comboBoxPropertySource.setEnabled(true);
            this.comboBoxPropertyValuetype.setEnabled(true);
            this.textPropertyFieldName.setEnabled(true);
            this.textAreaPropertyDescription.setEnabled(true);
            this.checkBoxMultipleOccurrences.setEnabled(true);
            this.buttonPropertyAddValueType.setEnabled(true);
            loadInstancePropertySources();
        } else if (this.comboBoxPropertyType.isEnabled() && this.comboBoxPropertyType.getSelectedItem().equals(PropertyType.ResultProperty)
                && !editing) {
            this.comboBoxPropertySource.setEnabled(true);
            this.comboBoxPropertyValuetype.setEnabled(true);
            this.textPropertyFieldName.setEnabled(true);
            this.textAreaPropertyDescription.setEnabled(true);
            this.checkBoxMultipleOccurrences.setEnabled(true);
            this.buttonPropertyAddValueType.setEnabled(true);
            loadResultPropertySources();
        }
    }

    public void loadResultPropertySources() {
        if (comboBoxPropertySource.getItemCount() != 0) {
            comboBoxPropertySource.removeItemListener(sourceListener);
            comboBoxPropertySource.removeAllItems();
        }

        for (int i = 0; i < ResultPropertySources.length; i++) {
            comboBoxPropertySource.addItem(ResultPropertySources[i]);
        }
        comboBoxPropertySource.addItemListener(sourceListener);
        comboBoxPropertySource.setSelectedIndex(1);
        comboBoxPropertySource.setSelectedIndex(0);
    }

    public void loadInstancePropertySources() {
        if (comboBoxPropertySource.getItemCount() != 0) {
            comboBoxPropertySource.removeItemListener(sourceListener);
            comboBoxPropertySource.removeAllItems();
        }
        for (int i = 0; i < InstancePropertySources.length; i++) {
            comboBoxPropertySource.addItem(InstancePropertySources[i]);
        }
        comboBoxPropertySource.addItemListener(sourceListener);
        comboBoxPropertySource.setSelectedIndex(1);
        comboBoxPropertySource.setSelectedIndex(0);
    }

    /**
     * Fills the input fields with the parameters of the given Property object and activates the input fields.
     * @param toShow the Property object to show.
     */
    public void showProperty(Property toShow) {
        this.editing = true;
        if (toShow.getType().equals(PropertyType.InstanceProperty)) {
            loadInstancePropertySources();
        } else {
            loadResultPropertySources();
        }
        if (!toShow.IsDefault()) {
            enableEditing();
        }
        this.comboBoxPropertyType.setSelectedItem(toShow.getType());
        this.textPropertyFieldName.setText(toShow.getName());
        this.textAreaPropertyDescription.setText(toShow.getDescription());
        if (toShow.getComputationMethod() != null) {
            this.radioBtnComputationMethod.setSelected(true);
            this.comboBoxComputationMethod.setSelectedItem(toShow.getComputationMethod());
            this.textFieldComputationmethodParameter.setText(toShow.getComputationMethodParameters());
        } else if (!toShow.getRegularExpression().equals("")) {
            this.radioBtnRegExpression.setSelected(true);
            String toAdd = "";
            for (int i = 0; i < toShow.getRegularExpression().size(); i++) {
                toAdd += toShow.getRegularExpression().get(i) + "\n";
            }
            this.textAreaRegularExpressions.setText(toAdd);
        }
        this.comboBoxPropertySource.setSelectedItem(toShow.getPropertySource());
        this.comboBoxPropertyValuetype.setSelectedItem(toShow.getPropertyValueType().getName());
        this.checkBoxMultipleOccurrences.setSelected(toShow.isMultiple());
    }

    private void enableEditing() {
        this.textPropertyFieldName.setEnabled(true);
        this.textAreaPropertyDescription.setEnabled(true);
        this.buttonSaveProperty.setEnabled(true);
        this.comboBoxComputationMethod.setEnabled(false);
        this.checkBoxMultipleOccurrences.setEnabled(false);
        this.comboBoxPropertySource.setEnabled(false);
        this.comboBoxPropertyType.setEnabled(false);
        this.comboBoxPropertyValuetype.setEnabled(false);
        this.textAreaRegularExpressions.setEnabled(false);
        this.textFieldComputationmethodParameter.setEnabled(false);
        this.buttonNewComputationMethod.setEnabled(false);
        this.buttonPropertyAddValueType.setEnabled(false);
        this.radioBtnComputationMethod.setEnabled(false);
        this.radioBtnRegExpression.setEnabled(false);
    }

    public void disablePropertyEditFields() {
        this.textPropertyFieldName.setEnabled(false);
        this.textAreaPropertyDescription.setEnabled(false);
    }

    void loadComputationMethods() {
        try {
            comboBoxComputationMethod.removeAllItems();
            Vector<ComputationMethod> items = controller.loadAllComputationMethods();
            for (int i = 0; i < items.size(); i++) {
                comboBoxComputationMethod.addItem(items.get(i).getName());


            }
        } catch (NoConnectionToDBException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ComputationMethodDoesNotExistException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void loadPropertyValues() {
        try {
            controller.loadPropertyValueTypes();


        } catch (IOException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoConnectionToDBException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EDACCManagePropertyDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void doEnable(boolean b) {
        this.textPropertyFieldName.setEnabled(b);
        this.textAreaPropertyDescription.setEnabled(b);
        this.buttonSaveProperty.setEnabled(b);
        this.comboBoxComputationMethod.setEnabled(b);
        this.checkBoxMultipleOccurrences.setEnabled(b);
        this.comboBoxPropertySource.setEnabled(b);
        this.comboBoxPropertyType.setEnabled(b);
        this.comboBoxPropertyValuetype.setEnabled(b);
        this.textAreaRegularExpressions.setEnabled(b);
        this.textFieldComputationmethodParameter.setEnabled(b);
        this.buttonNewComputationMethod.setEnabled(b);
        this.buttonPropertyAddValueType.setEnabled(b);
        this.radioBtnComputationMethod.setEnabled(b);
        this.radioBtnRegExpression.setEnabled(b);
    }
}
