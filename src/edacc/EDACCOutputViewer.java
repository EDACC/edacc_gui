/*
 * EDACCOutputViewer.java
 *
 * Created on 29.09.2010, 19:06:52
 */
package edacc;

import edacc.experiment.ExperimentController;
import edacc.experiment.ExperimentResultsBrowserTableModel;
import edacc.model.ConfigurationScenario;
import edacc.model.ExperimentResult;
import edacc.model.TaskRunnable;
import edacc.model.Tasks;
import java.sql.SQLException;
import javax.swing.SwingUtilities;

/**
 *
 * @author simon
 */
public class EDACCOutputViewer extends javax.swing.JDialog {

    /** Creates new form EDACCOutputViewer */
    private ExperimentController expController;

    public EDACCOutputViewer(java.awt.Frame parent, boolean modal, ExperimentController expController) {
        super(parent, modal);
        initComponents();
        this.expController = expController;
    }
    
    public EDACCOutputViewer(java.awt.Frame parent, boolean modal, ConfigurationScenario scenario) {
        super(parent, modal);
        initComponents();
        setTitle("Output Viewer - configurator output");
        setContent(scenario.getConfiguratorOutput());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCOutputViewer.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        txtContent.setColumns(20);
        txtContent.setEditable(false);
        txtContent.setRows(5);
        txtContent.setName("txtContent"); // NOI18N
        jScrollPane1.setViewportView(txtContent);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtContent;
    // End of variables declaration//GEN-END:variables

    public void setContent(String text) {
        if (text == null || "".equals(text)) {
            text = "No output";
        }
        txtContent.setText(text);
    }

    /**
     * Updates the content of this output viewer from experiment result output.
     * @param column 
     * @param expResult 
     */
    public void updateContent(int column, final ExperimentResult expResult) {
        String title = "Output Viewer - ";
        int ot = -1;
        if (column == ExperimentResultsBrowserTableModel.COL_SOLVER_OUTPUT) {
            ot = ExperimentResult.SOLVER_OUTPUT;
            title += "solver output";
        } else if (column == ExperimentResultsBrowserTableModel.COL_VERIFIER_OUTPUT) {
            ot = ExperimentResult.VERIFIER_OUTPUT;
            title += "verifier output";
        } else if (column == ExperimentResultsBrowserTableModel.COL_WATCHER_OUTPUT) {
            ot = ExperimentResult.WATCHER_OUTPUT;
            title += "watcher output";
        } else if (column == ExperimentResultsBrowserTableModel.COL_LAUNCHER_OUTPUT) {
            ot = ExperimentResult.LAUNCHER_OUTPUT;
            title += "launcher output";
        } 
        setTitle(title);
        final int f_ot = ot;
        if (ot != -1) {
            Tasks.startTask(new TaskRunnable() {

                @Override
                public void run(Tasks task) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            setContent("Loading..");
                        }
                    });
                    try {
                        final String result = expController.getExperimentResultOutput(f_ot, expResult);
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                setContent(result);
                            }
                        });
                    } catch (final SQLException ex) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                javax.swing.JOptionPane.showMessageDialog(null, "There was an error while communicating with the database: " + ex, "Connection error", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                        });
                    } catch (final Exception ex) {
                        javax.swing.JOptionPane.showMessageDialog(null, "" + ex, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }
}
