/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EDACCExperimentMode.java
 *
 * Created on 02.01.2010, 00:25:47
 */
package edacc;

import edacc.experiment.ExperimentInstanceClassTableModel;
import edacc.experiment.ExperimentController;
import edacc.experiment.ExperimentResultsBrowserTableModel;
import edacc.experiment.ExperimentTableModel;
import edacc.experiment.InstanceTableModel;
import edacc.experiment.InstanceTableModelRowFilter;
import edacc.experiment.SolverTableModel;
import edacc.manageDB.ManageDBGridQueues;
import edacc.model.AlreadyRunningTaskException;
import edacc.model.NoConnectionToDBException;
import edacc.model.Solver;
import edacc.model.Tasks;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableRowSorter;
import org.jdesktop.application.Action;

/**
 *
 * @author simon
 */
public class EDACCExperimentMode extends javax.swing.JPanel implements EDACCTaskEvents {

    public ExperimentController expController;
    public ExperimentTableModel expTableModel;
    public InstanceTableModel insTableModel;
    public SolverTableModel solTableModel;
    public ExperimentInstanceClassTableModel instanceClassModel;
    public ExperimentResultsBrowserTableModel jobsTableModel;
    public EDACCSolverConfigPanel solverConfigPanel;
    public TableRowSorter<InstanceTableModel> sorter;
    public InstanceTableModelRowFilter rowFilter;
    private EDACCInstanceFilter dialogFilter;

    /** Creates new form EDACCExperimentMode */
    public EDACCExperimentMode() {
        initComponents();
        manageExperimentPane.setEnabledAt(1, false);
        manageExperimentPane.setEnabledAt(2, false);
        manageExperimentPane.setEnabledAt(3, false);
        manageExperimentPane.setEnabledAt(4, false);

        expController = new ExperimentController(this, solverConfigPanel);
        expTableModel = new ExperimentTableModel();
        insTableModel = new InstanceTableModel();
        solTableModel = new SolverTableModel();
        jobsTableModel = new ExperimentResultsBrowserTableModel();
        instanceClassModel = new ExperimentInstanceClassTableModel(tableInstances, expController);

        tableJobs.setModel(jobsTableModel);
        tableExperiments.setModel(expTableModel);
        tableInstances.setModel(insTableModel);
        tableSolvers.setModel(solTableModel);
        tableInstanceClasses.setModel(instanceClassModel);
        sorter = new TableRowSorter<InstanceTableModel>(insTableModel);
        rowFilter = new InstanceTableModelRowFilter();
        tableInstances.setRowSorter(sorter);
        tableJobs.setDefaultRenderer(Object.class, new EDACCExperimentModeJobsCellRenderer());
        tableJobs.setDefaultRenderer(String.class, new EDACCExperimentModeJobsCellRenderer());
        tableJobs.setDefaultRenderer(Integer.class, new EDACCExperimentModeJobsCellRenderer());
        tableJobs.setDefaultRenderer(Float.class, new EDACCExperimentModeJobsCellRenderer());

    }

    public void initialize() throws SQLException {
        expController.initialize();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        manageExperimentPane = new javax.swing.JTabbedPane();
        panelManageExperiment = new javax.swing.JPanel();
        scrollPaneExperimentsTable = new javax.swing.JScrollPane();
        tableExperiments = new javax.swing.JTable();
        btnRemoveExperiment = new javax.swing.JButton();
        btnLoadExperiment = new javax.swing.JButton();
        pnlNewExperiment = new javax.swing.JPanel();
        lblExperimentName = new javax.swing.JLabel();
        lblExperimentDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtExperimentDescription = new javax.swing.JTextArea();
        txtExperimentName = new javax.swing.JTextField();
        btnCreateExperiment = new javax.swing.JButton();
        panelChooseSolver = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSolvers = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        btnSaveSolverConfigurations = new javax.swing.JButton();
        btnSelectAllSolvers = new javax.swing.JButton();
        btnDeselectAllSolvers = new javax.swing.JButton();
        btnReverseSolverSelection = new javax.swing.JButton();
        btnChooseSolvers = new javax.swing.JButton();
        panelChooseInstances = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        btnInvertSelection = new javax.swing.JButton();
        btnFilterInstances = new javax.swing.JButton();
        btnSelectAllInstances = new javax.swing.JButton();
        btnDeselectAllInstances = new javax.swing.JButton();
        btnSaveInstances = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableInstances = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableInstanceClasses = new javax.swing.JTable();
        btnSelectAllInstanceClasses = new javax.swing.JButton();
        btnDeselectAllInstnaceClasses = new javax.swing.JButton();
        panelExperimentParams = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumRuns = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chkGenerateSeeds = new javax.swing.JCheckBox();
        btnGenerateJobs = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMaxSeeds = new javax.swing.JTextField();
        txtTimeout = new javax.swing.JTextField();
        lblNumJobs = new javax.swing.JLabel();
        chkLinkSeeds = new javax.swing.JCheckBox();
        lblCurNumRuns = new javax.swing.JLabel();
        lblCurTimeout = new javax.swing.JLabel();
        btnGeneratePackage = new javax.swing.JButton();
        panelJobBrowser = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableJobs = new javax.swing.JTable();
        btnRefreshJobs = new javax.swing.JButton();

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(500, 591));

        manageExperimentPane.setName("manageExperimentPane"); // NOI18N
        manageExperimentPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                manageExperimentPaneStateChanged(evt);
            }
        });

        panelManageExperiment.setName("panelManageExperiment"); // NOI18N

        scrollPaneExperimentsTable.setName("scrollPaneExperimentsTable"); // NOI18N

        tableExperiments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableExperiments.setName("tableExperiments"); // NOI18N
        scrollPaneExperimentsTable.setViewportView(tableExperiments);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getActionMap(EDACCExperimentMode.class, this);
        btnRemoveExperiment.setAction(actionMap.get("btnRemoveExperiment")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCExperimentMode.class);
        btnRemoveExperiment.setText(resourceMap.getString("btnRemoveExperiment.text")); // NOI18N
        btnRemoveExperiment.setName("btnRemoveExperiment"); // NOI18N

        btnLoadExperiment.setAction(actionMap.get("btnLoadExperiment")); // NOI18N
        btnLoadExperiment.setText(resourceMap.getString("btnLoadExperiment.text")); // NOI18N
        btnLoadExperiment.setName("btnLoadExperiment"); // NOI18N

        pnlNewExperiment.setBorder(javax.swing.BorderFactory.createTitledBorder("New Experiment"));
        pnlNewExperiment.setName("pnlNewExperiment"); // NOI18N

        lblExperimentName.setText(resourceMap.getString("lblExperimentName.text")); // NOI18N
        lblExperimentName.setName("lblExperimentName"); // NOI18N

        lblExperimentDescription.setText(resourceMap.getString("lblExperimentDescription.text")); // NOI18N
        lblExperimentDescription.setName("lblExperimentDescription"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        txtExperimentDescription.setColumns(20);
        txtExperimentDescription.setRows(5);
        txtExperimentDescription.setName("txtExperimentDescription"); // NOI18N
        jScrollPane1.setViewportView(txtExperimentDescription);

        txtExperimentName.setName("txtExperimentName"); // NOI18N

        btnCreateExperiment.setAction(actionMap.get("btnCreateExperiment")); // NOI18N
        btnCreateExperiment.setText(resourceMap.getString("btnCreateExperiment.text")); // NOI18N
        btnCreateExperiment.setName("btnCreateExperiment"); // NOI18N

        javax.swing.GroupLayout pnlNewExperimentLayout = new javax.swing.GroupLayout(pnlNewExperiment);
        pnlNewExperiment.setLayout(pnlNewExperimentLayout);
        pnlNewExperimentLayout.setHorizontalGroup(
            pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNewExperimentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblExperimentName)
                    .addComponent(lblExperimentDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNewExperimentLayout.createSequentialGroup()
                        .addComponent(txtExperimentName, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addGap(192, 192, 192))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlNewExperimentLayout.setVerticalGroup(
            pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNewExperimentLayout.createSequentialGroup()
                .addGroup(pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlNewExperimentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCreateExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlNewExperimentLayout.createSequentialGroup()
                        .addGroup(pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtExperimentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExperimentName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlNewExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(lblExperimentDescription))))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelManageExperimentLayout = new javax.swing.GroupLayout(panelManageExperiment);
        panelManageExperiment.setLayout(panelManageExperimentLayout);
        panelManageExperimentLayout.setHorizontalGroup(
            panelManageExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageExperimentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelManageExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelManageExperimentLayout.createSequentialGroup()
                        .addComponent(btnRemoveExperiment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadExperiment))
                    .addComponent(scrollPaneExperimentsTable, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addComponent(pnlNewExperiment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelManageExperimentLayout.setVerticalGroup(
            panelManageExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelManageExperimentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneExperimentsTable, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelManageExperimentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadExperiment)
                    .addComponent(btnRemoveExperiment))
                .addGap(18, 18, 18)
                .addComponent(pnlNewExperiment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        manageExperimentPane.addTab("Experiments", panelManageExperiment);

        panelChooseSolver.setName("panelChooseSolver"); // NOI18N

        jSplitPane1.setDividerLocation(500);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tableSolvers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSolvers.setName("tableSolvers"); // NOI18N
        jScrollPane3.setViewportView(tableSolvers);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel2);

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane4.setName("jScrollPane4"); // NOI18N
        solverConfigPanel = new EDACCSolverConfigPanel();
        jScrollPane4.setViewportView(solverConfigPanel);
        jScrollPane4.getVerticalScrollBar().setUnitIncrement(30);
        jSplitPane1.setRightComponent(jScrollPane4);

        btnSaveSolverConfigurations.setAction(actionMap.get("btnSaveSolverConfigurations")); // NOI18N
        btnSaveSolverConfigurations.setText(resourceMap.getString("btnSaveSolverConfigurations.text")); // NOI18N
        btnSaveSolverConfigurations.setName("btnSaveSolverConfigurations"); // NOI18N

        btnSelectAllSolvers.setAction(actionMap.get("btnSelectAllSolvers")); // NOI18N
        btnSelectAllSolvers.setText(resourceMap.getString("btnSelectAllSolvers.text")); // NOI18N
        btnSelectAllSolvers.setName("btnSelectAllSolvers"); // NOI18N

        btnDeselectAllSolvers.setAction(actionMap.get("btnDeselectAll")); // NOI18N
        btnDeselectAllSolvers.setText(resourceMap.getString("btnDeselectAllSolvers.text")); // NOI18N
        btnDeselectAllSolvers.setName("btnDeselectAllSolvers"); // NOI18N

        btnReverseSolverSelection.setAction(actionMap.get("btnReverseSolverSelection")); // NOI18N
        btnReverseSolverSelection.setText(resourceMap.getString("btnReverseSolverSelection.text")); // NOI18N
        btnReverseSolverSelection.setName("btnReverseSolverSelection"); // NOI18N

        btnChooseSolvers.setAction(actionMap.get("btnChooseSolvers")); // NOI18N
        btnChooseSolvers.setText(resourceMap.getString("btnChooseSolvers.text")); // NOI18N
        btnChooseSolvers.setName("btnChooseSolvers"); // NOI18N

        javax.swing.GroupLayout panelChooseSolverLayout = new javax.swing.GroupLayout(panelChooseSolver);
        panelChooseSolver.setLayout(panelChooseSolverLayout);
        panelChooseSolverLayout.setHorizontalGroup(
            panelChooseSolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChooseSolverLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChooseSolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                    .addGroup(panelChooseSolverLayout.createSequentialGroup()
                        .addComponent(btnSelectAllSolvers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeselectAllSolvers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReverseSolverSelection)
                        .addGap(149, 149, 149)
                        .addComponent(btnChooseSolvers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(btnSaveSolverConfigurations)))
                .addContainerGap())
        );
        panelChooseSolverLayout.setVerticalGroup(
            panelChooseSolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChooseSolverLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelChooseSolverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectAllSolvers)
                    .addComponent(btnDeselectAllSolvers)
                    .addComponent(btnReverseSolverSelection)
                    .addComponent(btnChooseSolvers)
                    .addComponent(btnSaveSolverConfigurations))
                .addContainerGap())
        );

        manageExperimentPane.addTab("Solvers", panelChooseSolver);

        panelChooseInstances.setName("panelChooseInstances"); // NOI18N
        panelChooseInstances.setPreferredSize(new java.awt.Dimension(668, 623));

        jSplitPane2.setDividerLocation(600);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        btnInvertSelection.setAction(actionMap.get("btnInvertSelection")); // NOI18N
        btnInvertSelection.setText(resourceMap.getString("btnInvertSelection.text")); // NOI18N
        btnInvertSelection.setName("btnInvertSelection"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel3.add(btnInvertSelection, gridBagConstraints);

        btnFilterInstances.setAction(actionMap.get("btnInstanceFilter")); // NOI18N
        btnFilterInstances.setText(resourceMap.getString("btnFilterInstances.text")); // NOI18N
        btnFilterInstances.setName("btnFilterInstances"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel3.add(btnFilterInstances, gridBagConstraints);

        btnSelectAllInstances.setAction(actionMap.get("btnSelectAllInstances")); // NOI18N
        btnSelectAllInstances.setText(resourceMap.getString("btnSelectAllInstances.text")); // NOI18N
        btnSelectAllInstances.setName("btnSelectAllInstances"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel3.add(btnSelectAllInstances, gridBagConstraints);

        btnDeselectAllInstances.setAction(actionMap.get("btnDeselectAllInstances")); // NOI18N
        btnDeselectAllInstances.setText(resourceMap.getString("btnDeselectAllInstances.text")); // NOI18N
        btnDeselectAllInstances.setName("btnDeselectAllInstances"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel3.add(btnDeselectAllInstances, gridBagConstraints);

        btnSaveInstances.setAction(actionMap.get("btnSaveInstances")); // NOI18N
        btnSaveInstances.setText(resourceMap.getString("btnSaveInstances.text")); // NOI18N
        btnSaveInstances.setName("btnSaveInstances"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 56;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel3.add(btnSaveInstances, gridBagConstraints);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tableInstances.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableInstances.setName("tableInstances"); // NOI18N
        jScrollPane2.setViewportView(tableInstances);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        jSplitPane2.setLeftComponent(jPanel3);

        jPanel4.setName("jPanel4"); // NOI18N
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        tableInstanceClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableInstanceClasses.setName("tableInstanceClasses"); // NOI18N
        jScrollPane5.setViewportView(tableInstanceClasses);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        jPanel4.add(jScrollPane5, gridBagConstraints);

        btnSelectAllInstanceClasses.setText(resourceMap.getString("btnSelectAllInstanceClasses.text")); // NOI18N
        btnSelectAllInstanceClasses.setName("btnSelectAllInstanceClasses"); // NOI18N
        btnSelectAllInstanceClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllInstanceClassesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel4.add(btnSelectAllInstanceClasses, gridBagConstraints);

        btnDeselectAllInstnaceClasses.setText(resourceMap.getString("btnDeselectAllInstnaceClasses.text")); // NOI18N
        btnDeselectAllInstnaceClasses.setName("btnDeselectAllInstnaceClasses"); // NOI18N
        btnDeselectAllInstnaceClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectAllInstnaceClassesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel4.add(btnDeselectAllInstnaceClasses, gridBagConstraints);

        jSplitPane2.setRightComponent(jPanel4);

        javax.swing.GroupLayout panelChooseInstancesLayout = new javax.swing.GroupLayout(panelChooseInstances);
        panelChooseInstances.setLayout(panelChooseInstancesLayout);
        panelChooseInstancesLayout.setHorizontalGroup(
            panelChooseInstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
        );
        panelChooseInstancesLayout.setVerticalGroup(
            panelChooseInstancesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );

        manageExperimentPane.addTab("Instances", panelChooseInstances);

        panelExperimentParams.setName("panelExperimentParams"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        txtNumRuns.setText(resourceMap.getString("txtNumRuns.text")); // NOI18N
        txtNumRuns.setToolTipText(resourceMap.getString("txtNumRuns.toolTipText")); // NOI18N
        txtNumRuns.setName("txtNumRuns"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        chkGenerateSeeds.setToolTipText(resourceMap.getString("chkGenerateSeeds.toolTipText")); // NOI18N
        chkGenerateSeeds.setLabel(resourceMap.getString("chkGenerateSeeds.label")); // NOI18N
        chkGenerateSeeds.setName("chkGenerateSeeds"); // NOI18N

        btnGenerateJobs.setAction(actionMap.get("btnGenerateJobs")); // NOI18N
        btnGenerateJobs.setText(resourceMap.getString("btnGenerateJobs.text")); // NOI18N
        btnGenerateJobs.setName("btnGenerateJobs"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        txtMaxSeeds.setText(resourceMap.getString("txtMaxSeeds.text")); // NOI18N
        txtMaxSeeds.setToolTipText(resourceMap.getString("txtMaxSeeds.toolTipText")); // NOI18N
        txtMaxSeeds.setName("txtMaxSeeds"); // NOI18N

        txtTimeout.setText(resourceMap.getString("txtTimeout.text")); // NOI18N
        txtTimeout.setName("txtTimeout"); // NOI18N

        lblNumJobs.setText(resourceMap.getString("lblNumJobs.text")); // NOI18N
        lblNumJobs.setName("lblNumJobs"); // NOI18N

        chkLinkSeeds.setToolTipText(resourceMap.getString("chkLinkSeeds.toolTipText")); // NOI18N
        chkLinkSeeds.setLabel(resourceMap.getString("chkLinkSeeds.label")); // NOI18N
        chkLinkSeeds.setName("chkLinkSeeds"); // NOI18N

        lblCurNumRuns.setText(resourceMap.getString("lblCurNumRuns.text")); // NOI18N
        lblCurNumRuns.setName("lblCurNumRuns"); // NOI18N

        lblCurTimeout.setText(resourceMap.getString("lblCurTimeout.text")); // NOI18N
        lblCurTimeout.setName("lblCurTimeout"); // NOI18N

        btnGeneratePackage.setText(resourceMap.getString("generatePackage.text")); // NOI18N
        btnGeneratePackage.setActionCommand(resourceMap.getString("generatePackage.actionCommand")); // NOI18N
        btnGeneratePackage.setName("generatePackage"); // NOI18N
        btnGeneratePackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneratePackage(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkLinkSeeds)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMaxSeeds, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNumRuns)
                                    .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chkGenerateSeeds, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCurTimeout)
                            .addComponent(lblCurNumRuns)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnGeneratePackage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGenerateJobs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumJobs)))
                .addContainerGap(428, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurNumRuns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkGenerateSeeds)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkLinkSeeds)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMaxSeeds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenerateJobs)
                            .addComponent(lblNumJobs, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblCurTimeout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGeneratePackage)
                .addContainerGap(351, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelExperimentParamsLayout = new javax.swing.GroupLayout(panelExperimentParams);
        panelExperimentParams.setLayout(panelExperimentParamsLayout);
        panelExperimentParamsLayout.setHorizontalGroup(
            panelExperimentParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelExperimentParamsLayout.setVerticalGroup(
            panelExperimentParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        manageExperimentPane.addTab("Experiment Parameters", panelExperimentParams);

        panelJobBrowser.setName("panelJobBrowser"); // NOI18N
        panelJobBrowser.setPreferredSize(new java.awt.Dimension(10000, 10000));

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        tableJobs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableJobs.setName("tableJobs"); // NOI18N
        jScrollPane6.setViewportView(tableJobs);

        btnRefreshJobs.setAction(actionMap.get("btnRefreshJobs")); // NOI18N
        btnRefreshJobs.setText(resourceMap.getString("btnRefreshJobs.text")); // NOI18N
        btnRefreshJobs.setName("btnRefreshJobs"); // NOI18N

        javax.swing.GroupLayout panelJobBrowserLayout = new javax.swing.GroupLayout(panelJobBrowser);
        panelJobBrowser.setLayout(panelJobBrowserLayout);
        panelJobBrowserLayout.setHorizontalGroup(
            panelJobBrowserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelJobBrowserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRefreshJobs)
                .addContainerGap(600, Short.MAX_VALUE))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
        );
        panelJobBrowserLayout.setVerticalGroup(
            panelJobBrowserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJobBrowserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRefreshJobs)
                .addContainerGap())
        );

        manageExperimentPane.addTab(resourceMap.getString("panelJobBrowser.TabConstraints.tabTitle"), panelJobBrowser); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageExperimentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(manageExperimentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void manageExperimentPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_manageExperimentPaneStateChanged
        if (manageExperimentPane.getSelectedIndex() == 3) {
            // generate jobs tab
            lblCurNumRuns.setText("currently: " + String.valueOf(expController.getActiveExperiment().getNumRuns()));
            lblCurTimeout.setText("currently: " + String.valueOf(expController.getActiveExperiment().getTimeOut()));
            if ("".equals(txtNumRuns.getText())) {
                txtNumRuns.setText(String.valueOf(expController.getActiveExperiment().getNumRuns()));
            }
            if ("".equals(txtTimeout.getText())) {
                txtTimeout.setText(String.valueOf(expController.getActiveExperiment().getTimeOut()));
            }
            chkGenerateSeeds.setSelected(expController.getActiveExperiment().isAutoGeneratedSeeds());
            lblNumJobs.setText(String.valueOf(expController.getNumJobs()) + " jobs in the database");
        } else if (manageExperimentPane.getSelectedIndex() == 4) {
            // job browser tab
            expController.loadJobs();
        }
    }//GEN-LAST:event_manageExperimentPaneStateChanged

    private void btnGeneratePackage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneratePackage
        try {
            // Generate zip archive
            expController.generatePackage();
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (NoConnectionToDBException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_btnGeneratePackage

    private void btnSelectAllInstanceClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllInstanceClassesActionPerformed
        expController.selectAllInstanceClasses();
    }//GEN-LAST:event_btnSelectAllInstanceClassesActionPerformed

    private void btnDeselectAllInstnaceClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectAllInstnaceClassesActionPerformed
        expController.deselectAllInstanceClasses();
    }//GEN-LAST:event_btnDeselectAllInstnaceClassesActionPerformed
    /**
     * Method to be called after an experiment is loaded.
     */
    public void afterExperimentLoaded() {
        manageExperimentPane.setEnabledAt(1, true);
        manageExperimentPane.setEnabledAt(2, true);
        manageExperimentPane.setEnabledAt(3, true);
        manageExperimentPane.setEnabledAt(4, true);
    }

    /**
     * Method to be call after an experiment ist unloaded.
     */
    public void afterExperimentUnloaded() {
        manageExperimentPane.setEnabledAt(1, false);
        manageExperimentPane.setEnabledAt(2, false);
        manageExperimentPane.setEnabledAt(3, false);
        manageExperimentPane.setEnabledAt(4, false);
    }

    private void createDatabaseErrorMessage(SQLException e) {
        javax.swing.JOptionPane.showMessageDialog(null, "There was an error while communicating with the database: " + e, "Connection error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    @Action
    public void btnLoadExperiment() {
        if (tableExperiments.getSelectedRow() != -1) {
            if (expController.getActiveExperiment() != null) {
                if (JOptionPane.showConfirmDialog(this,
                        "Loading an experiment will make you lose all unsaved changes of the current experiment. Continue loading the experiment?",
                        "Warning!",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                    try {
                        Integer i = (Integer) expTableModel.getValueAt(tableExperiments.getSelectedRow(), 5);
                        expController.loadExperiment(i.intValue());
                    } catch (SQLException ex) {
                        createDatabaseErrorMessage(ex);
                    }
                }
            } else {
                try {
                    Integer i = (Integer) expTableModel.getValueAt(tableExperiments.getSelectedRow(), 5);
                    expController.loadExperiment(i.intValue());
                } catch (SQLException ex) {
                    createDatabaseErrorMessage(ex);
                }
            }
        }
    }

    @Action
    public void btnCreateExperiment() {
        try {
            long currentTime = System.currentTimeMillis();
            expController.createExperiment(txtExperimentName.getText(), txtExperimentDescription.getText());
        } catch (SQLException ex) {
            createDatabaseErrorMessage(ex);
        }
    }

    @Action
    public void btnRemoveExperiment() {
        if (tableExperiments.getSelectedRow() != -1) {
            try {
                Integer i = (Integer) expTableModel.getValueAt(tableExperiments.getSelectedRow(), 5);
                expController.removeExperiment(i);
            } catch (SQLException ex) {
                createDatabaseErrorMessage(ex);
            }
        }
    }

    @Action
    public void btnChooseSolvers() {
        solverConfigPanel.beginUpdate();
        for (int i = 0; i < solTableModel.getRowCount(); i++) {
            if ((Boolean) solTableModel.getValueAt(i, 4) && !solverConfigPanel.solverExists(((Solver) solTableModel.getValueAt(i, 5)).getId())) {
                solverConfigPanel.addSolver(solTableModel.getValueAt(i, 5));
            } else if (!(Boolean) solTableModel.getValueAt(i, 4)) {
                solverConfigPanel.removeSolver(solTableModel.getValueAt(i, 5));
            }
        }
        solverConfigPanel.endUpdate();
    }

    @Action
    public void btnSaveSolverConfigurations() {
        try {
            expController.saveSolverConfigurations();
        } catch (SQLException e) {
            createDatabaseErrorMessage(e);
        }
    }

    @Action
    public void btnSelectAllSolvers() {
        for (int i = 0; i < solTableModel.getRowCount(); i++) {
            solTableModel.setValueAt(true, i, 4);
        }
    }

    @Action
    public void btnDeselectAll() {
        for (int i = 0; i < solTableModel.getRowCount(); i++) {
            solTableModel.setValueAt(false, i, 4);
        }
    }

    @Action
    public void btnReverseSolverSelection() {
        for (int i = 0; i < solTableModel.getRowCount(); i++) {
            solTableModel.setValueAt(!((Boolean) solTableModel.getValueAt(i, 4)), i, 4);
        }
    }

    @Action
    public void btnSaveInstances() {
        try {
            expController.saveExperimentHasInstances();
        } catch (SQLException ex) {
            createDatabaseErrorMessage(ex);
        }

    }

    @Action
    public void btnSelectAllInstances() {
        for (int i = 0; i < insTableModel.getRowCount(); i++) {
            insTableModel.setValueAt(true, i, 5);
        }
    }

    @Action
    public void btnDeselectAllInstances() {
        for (int i = 0; i < insTableModel.getRowCount(); i++) {
            insTableModel.setValueAt(false, i, 5);
        }
    }

    @Action
    public void btnInvertSelection() {
        for (int i = 0; i < insTableModel.getRowCount(); i++) {
            insTableModel.setValueAt(!((Boolean) insTableModel.getValueAt(i, 5)), i, 5);
        }
    }

    @Action
    public void btnGenerateJobs() {
        try {
            int numRuns = Integer.parseInt(txtNumRuns.getText());
            int timeout = Integer.parseInt(txtTimeout.getText());
            boolean generateSeeds = chkGenerateSeeds.isSelected();
            boolean linkSeeds = chkLinkSeeds.isSelected();
            int maxSeed = Integer.parseInt(txtMaxSeeds.getText());
            //int added_experiments = expController.generateJobs(numRuns, timeout, generateSeeds, maxSeed, linkSeeds);
            Tasks.startTask("generateJobs", new Class[]{int.class, int.class, boolean.class, int.class, boolean.class, edacc.model.Tasks.class}, new Object[]{numRuns, timeout, generateSeeds, maxSeed, linkSeeds, null}, expController, this, 0);
            lblCurNumRuns.setText("currently: " + txtNumRuns.getText());
            lblCurTimeout.setText("currently: " + txtTimeout.getText());

            // TODO assignment of more than one queue/write extra method!
            // assign the default queue to this experiment
            expController.assignQueueToExperiment(ManageDBGridQueues.getInstance().getDefaultQueue()); // TODO not very nice; will be changed
        } catch (AlreadyRunningTaskException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "Expected integers for number of runs, timeout and max seed", "invalid data", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(null, "An error occured while assigning a grid queue to the experiment: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    public JTable getTableInstances() {
        return tableInstances;
    }

    @Action
    public void btnInstanceFilter() {
        if (dialogFilter == null) {
            JFrame mainFrame = EDACCApp.getApplication().getMainFrame();
            dialogFilter = new EDACCInstanceFilter(mainFrame, true, this);
            dialogFilter.setLocationRelativeTo(mainFrame);
        }
        dialogFilter.loadValues();
        EDACCApp.getApplication().show(dialogFilter);
    }

    @Action
    public void btnRefreshJobs() {
        expController.loadJobs();
        jobsTableModel.fireTableDataChanged();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseSolvers;
    private javax.swing.JButton btnCreateExperiment;
    private javax.swing.JButton btnDeselectAllInstances;
    private javax.swing.JButton btnDeselectAllInstnaceClasses;
    private javax.swing.JButton btnDeselectAllSolvers;
    private javax.swing.JButton btnFilterInstances;
    private javax.swing.JButton btnGenerateJobs;
    private javax.swing.JButton btnGeneratePackage;
    private javax.swing.JButton btnInvertSelection;
    private javax.swing.JButton btnLoadExperiment;
    private javax.swing.JButton btnRefreshJobs;
    private javax.swing.JButton btnRemoveExperiment;
    private javax.swing.JButton btnReverseSolverSelection;
    private javax.swing.JButton btnSaveInstances;
    private javax.swing.JButton btnSaveSolverConfigurations;
    private javax.swing.JButton btnSelectAllInstanceClasses;
    private javax.swing.JButton btnSelectAllInstances;
    private javax.swing.JButton btnSelectAllSolvers;
    private javax.swing.JCheckBox chkGenerateSeeds;
    private javax.swing.JCheckBox chkLinkSeeds;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lblCurNumRuns;
    private javax.swing.JLabel lblCurTimeout;
    private javax.swing.JLabel lblExperimentDescription;
    private javax.swing.JLabel lblExperimentName;
    private javax.swing.JLabel lblNumJobs;
    private javax.swing.JTabbedPane manageExperimentPane;
    private javax.swing.JPanel panelChooseInstances;
    private javax.swing.JPanel panelChooseSolver;
    private javax.swing.JPanel panelExperimentParams;
    private javax.swing.JPanel panelJobBrowser;
    private javax.swing.JPanel panelManageExperiment;
    private javax.swing.JPanel pnlNewExperiment;
    private javax.swing.JScrollPane scrollPaneExperimentsTable;
    private javax.swing.JTable tableExperiments;
    private javax.swing.JTable tableInstanceClasses;
    private javax.swing.JTable tableInstances;
    private javax.swing.JTable tableJobs;
    private javax.swing.JTable tableSolvers;
    private javax.swing.JTextArea txtExperimentDescription;
    private javax.swing.JTextField txtExperimentName;
    private javax.swing.JTextField txtMaxSeeds;
    private javax.swing.JTextField txtNumRuns;
    private javax.swing.JTextField txtTimeout;
    // End of variables declaration//GEN-END:variables

    public void onTaskSuccessful(int id, Object result) {
        if (id == 0) {
            int added_experiments = (Integer) result;
            lblNumJobs.setText(String.valueOf(expController.getNumJobs()) + " jobs in the database");
            javax.swing.JOptionPane.showMessageDialog(null, "Added " + added_experiments + " new jobs", "Jobs added", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            btnGenerateJobs.setEnabled(true);
            manageExperimentPane.setEnabled(true);
        }
    }

    public void onTaskStart(int id) {
        if (id == 0) {
            btnGenerateJobs.setEnabled(false);
            manageExperimentPane.setEnabled(false);
        }
    }

    public void onTaskFailed(int id, Throwable e) {
        if (id == 0) {
            if (e instanceof SQLException) {
                createDatabaseErrorMessage((SQLException) e);
            }
            btnGenerateJobs.setEnabled(true);
            manageExperimentPane.setEnabled(true);
        }
    }
}
