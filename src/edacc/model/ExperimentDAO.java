package edacc.model;

import java.util.LinkedList;
import java.util.Hashtable;
import java.sql.*;

/**
 *
 * @author daniel
 */
public class ExperimentDAO {
    protected static final String table = "Experiment";
    private static final Hashtable<Experiment, Experiment> cache = new Hashtable<Experiment, Experiment>();

    /**
     * Experiment factory method, ensures that the created experiment is persisted and assigned an ID
     * so it can be referenced by related objects
     * @return new Experiment object
     */
     public static Experiment createExperiment() {
        Experiment i = new Experiment();
        save(i);
        cacheExperiment(i);
        return i;
     }

    /**
     * persists an Experiment object in the database
     * @param experiment The Experiment object to persist
     */
    public static void save(Experiment experiment) {
        if (experiment.isNew()) {
            // insert query, set ID!
            experiment.setSaved();
        }
        else if (experiment.isModified()) {
            // update query
            experiment.setSaved();
        }
    }

    private static Experiment getCached(Experiment i) {
        if (cache.containsKey(i)) {
            return cache.get(i);
        }
        else return null;
    }

    private static void cacheExperiment(Experiment i) {
        if (cache.containsKey(i)) return;
        else cache.put(i, i);
    }

    /**
     * retrieves an experiment from the database
     * @param id the id of the experiment to be retrieved
     * @return the experiment specified by its id
     * @throws SQLException
     */
    public static Experiment getById(int id) throws SQLException {
        PreparedStatement st = DatabaseConnector.getInstance().conn.prepareStatement("SELECT * FROM " + table + " WHERE idExperiment=?");
        st.setInt(1, id);
        ResultSet rs = st.executeQuery();
        Experiment i = new Experiment();
        if (rs.next()) {
            i.setId(rs.getInt("idExperiment"));
            i.setName(rs.getString("Name"));
            i.setDate(rs.getDate("Date"));
            i.setDescription(rs.getString("description"));
            i.setNumRuns(rs.getInt("numRuns"));
            i.setTimeOut(rs.getInt("timeOut"));
            i.setAutoGeneratedSeeds(rs.getBoolean("autoGeneratedSeeds"));

            Experiment c = getCached(i);
            if (c != null) return c;
            else {
                i.setSaved();
                cacheExperiment(i);
                return i;
            }
        }
        return null;
    }

    /**
     * retrieves all experiments from the database
     * @return all experiments in a List
     * @throws SQLException
     */
    public static LinkedList<Experiment> getAll() throws SQLException {
        Statement st = DatabaseConnector.getInstance().conn.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM " + table);
        LinkedList<Experiment> res = new LinkedList<Experiment>();
        while (rs.next()) {
            Experiment i = new Experiment();
            i.setId(rs.getInt("idExperiment"));
            i.setName(rs.getString("Name"));
            i.setDate(rs.getDate("Date"));
            i.setDescription(rs.getString("description"));
            i.setNumRuns(rs.getInt("numRuns"));
            i.setTimeOut(rs.getInt("timeOut"));
            i.setAutoGeneratedSeeds(rs.getBoolean("autoGeneratedSeeds"));

            Experiment c = getCached(i);
            if (c != null) res.add(c);
            else {
                i.setSaved();
                cacheExperiment(i);
                res.add(i);
            }
        }
        rs.close();
        return res;
    }

    
}
