package edacc.model;

import java.util.LinkedList;
import java.util.Hashtable;
import java.sql.*;
import java.util.Vector;

/**
 *
 * @author daniel
 */
public class ExperimentDAO {

    protected static final String table = "Experiment";
    protected static final String insertQuery = "INSERT INTO " + table + " (Name, Date, description, numRuns, timeOut, autoGeneratedSeeds) VALUES (?, ?, ?, ?, ?, ?)";
    protected static final String updateQuery = "UPDATE "+table+" SET Name =? AND Date =? AND description =? AND numRuns =? AND timeOut =? AND autoGeneratedSeeds =? WHERE idExperiment=?";
    protected static final String deleteQuery = "DELETE FROM "+table+" WHERE idExperiment=?";
    private static final Hashtable<Experiment, Experiment> cache = new Hashtable<Experiment, Experiment>();

    /**
     * Experiment factory method, ensures that the created experiment is persisted and assigned an ID
     * so it can be referenced by related objects
     * @return new Experiment object
     */
    public static Experiment createExperiment(String name, Date date, String description) throws SQLException {
        Experiment i = new Experiment();
        i.setName(name);
        i.setDescription(description);
        i.setDate(date);
        save(i);
        cacheExperiment(i);
        return i;
    }

    /**
     * persists an Experiment object in the database
     * @param experiment The Experiment object to persist
     */
    public static void save(Experiment experiment) throws SQLException {
        PreparedStatement st = null;
        if (experiment.isNew()) {
            st = DatabaseConnector.getInstance().getConn().prepareStatement(insertQuery, PreparedStatement.RETURN_GENERATED_KEYS);
        } else if (experiment.isModified()) {
            st = DatabaseConnector.getInstance().getConn().prepareStatement(updateQuery);
            st.setInt(7, experiment.getId());
            experiment.setSaved();
        } else {
            return;
        }
        st.setString(1, experiment.getName());
        st.setDate(2, experiment.getDate());
        st.setString(3, experiment.getDescription());
        st.setInt(4, experiment.getNumRuns());
        st.setInt(5, experiment.getTimeOut());
        st.setBoolean(6, experiment.isAutoGeneratedSeeds());
        st.executeUpdate();

        if (experiment.isNew()) {
            ResultSet generatedKeys = st.getGeneratedKeys();
            if (generatedKeys.next()) {
                experiment.setId(generatedKeys.getInt(1));
            }
        }
        experiment.setSaved();
    }
    /**
     * removes an experiment from the database
     * @param experiment
     * @throws SQLException
     */
    public static void removeExperiment(Experiment experiment) throws SQLException {
        cache.remove(experiment);
        PreparedStatement st = DatabaseConnector.getInstance().getConn().prepareStatement(deleteQuery);
        st.setInt(1, experiment.getId());
        st.executeUpdate();
    }

    private static Experiment getExperimentFromResultset(ResultSet rs) throws SQLException {
        Experiment i = new Experiment();
        i.setId(rs.getInt("idExperiment"));
        i.setName(rs.getString("Name"));
        i.setDate(rs.getDate("Date"));
        i.setDescription(rs.getString("description"));
        i.setNumRuns(rs.getInt("numRuns"));
        i.setTimeOut(rs.getInt("timeOut"));
        i.setAutoGeneratedSeeds(rs.getBoolean("autoGeneratedSeeds"));
        return i;
    }

    private static Experiment getCached(Experiment i) {
        if (cache.containsKey(i)) {
            return cache.get(i);
        } else {
            return null;
        }
    }

    private static void cacheExperiment(Experiment i) {
        if (cache.containsKey(i)) {
            return;
        } else {
            cache.put(i, i);
        }
    }

    private static Vector<SolverConfiguration> getExperimentSolverConfiguration(Experiment i) throws SQLException {
        return SolverConfigurationDAO.getSolverConfigurationByExperimentId(i.getId());
    }

    /**
     * retrieves an experiment from the database
     * @param id the id of the experiment to be retrieved
     * @return the experiment specified by its id
     * @throws SQLException
     */
    public static Experiment getById(int id) throws SQLException {
        PreparedStatement st = DatabaseConnector.getInstance().getConn().prepareStatement("SELECT * FROM " + table + " WHERE idExperiment=?");
        st.setInt(1, id);
        ResultSet rs = st.executeQuery();
        if (rs.next()) {
            Experiment i = getExperimentFromResultset(rs);

            Experiment c = getCached(i);
            if (c != null) {
                return c;
            } else {
                i.setSaved();
                cacheExperiment(i);
                return i;
            }
        }
        return null;
    }

    /**
     * retrieves all experiments from the database
     * @return all experiments in a List
     * @throws SQLException
     */
    public static LinkedList<Experiment> getAll() throws SQLException {
        Statement st = DatabaseConnector.getInstance().getConn().createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM " + table);
        LinkedList<Experiment> res = new LinkedList<Experiment>();
        while (rs.next()) {
            Experiment i = getExperimentFromResultset(rs);

            Experiment c = getCached(i);
            if (c != null) {
                res.add(c);
            } else {
                i.setSaved();
                cacheExperiment(i);
                res.add(i);
            }
        }
        rs.close();
        return res;
    }
}
