/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DateFilter.java
 *
 * Created on 20.01.2012, 14:08:04
 */
package edacc.filter;

import java.util.Date;

/**
 * Filter for object of type java.sql.Date or java.util.Date
 * @author simon
 */
public class DateFilter extends javax.swing.JPanel implements FilterInterface {

    private Date date;
    private Date tmpDate;
    private String compStr;

    /** Creates new form DateFilter */
    private DateFilter() {
        initComponents();
    }

    public DateFilter(String name) {
        this();
        date = new Date();
        btnCalendar.setTargetDate(date);
        tmpDate = date;
        txtDate.setText(new java.sql.Date(btnCalendar.getTargetDate().getTime()).toString());
        comboOperator.removeAllItems();
        comboOperator.addItem("<");
        comboOperator.addItem("<=");
        comboOperator.addItem("==");
        comboOperator.addItem(">=");
        comboOperator.addItem(">");
        compStr = "<";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        comboOperator = new javax.swing.JComboBox();
        txtDate = new javax.swing.JTextField();
        btnCalendar = new net.sourceforge.jcalendarbutton.JCalendarButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(DateFilter.class);
        lblName.setText(resourceMap.getString("lblName.text")); // NOI18N
        lblName.setName("lblName"); // NOI18N

        comboOperator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboOperator.setName("comboOperator"); // NOI18N

        txtDate.setEditable(false);
        txtDate.setText(resourceMap.getString("txtDate.text")); // NOI18N
        txtDate.setName("txtDate"); // NOI18N

        btnCalendar.setText(resourceMap.getString("btnCalendar.text")); // NOI18N
        btnCalendar.setName("btnCalendar"); // NOI18N
        btnCalendar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnCalendarPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblName)
                .addComponent(comboOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalendarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnCalendarPropertyChange
        if (evt.getNewValue() instanceof Date) {
            Date d = (Date) evt.getNewValue();
            txtDate.setText(new java.sql.Date(d.getTime()).toString());
            tmpDate = d;
        }
    }//GEN-LAST:event_btnCalendarPropertyChange
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.sourceforge.jcalendarbutton.JCalendarButton btnCalendar;
    private javax.swing.JComboBox comboOperator;
    private javax.swing.JLabel lblName;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean include(Object value) {
        int comp = 0;
        if (value instanceof java.util.Date) {
            java.util.Date d = (java.util.Date) value;
            comp = new java.util.Date((d.getTime() / 86400000) * 86400000).compareTo(new java.util.Date(((date.getTime() / 86400000)-1) * 86400000));
        } else {
            return false;
        }
        System.out.println("COMP = " + comp);
        if ("<".equals(compStr)) {
            return comp < 0;
        } else if ("<=".equals(compStr)) {
            return comp <= 0;
        } else if ("==".equals(compStr)) {
            return comp == 0;
        } else if (">=".equals(compStr)) {
            return comp >= 0;
        } else if (">".equals(compStr)) {
            return comp > 0;
        }
        return false;
    }

    @Override
    public void apply() {
        date = tmpDate;
        if (comboOperator.getSelectedItem() instanceof String) {
            compStr = (String) comboOperator.getSelectedItem();
        } else {
            compStr = "<";
        }
    }

    @Override
    public void undo() {
        comboOperator.setSelectedItem(compStr);
        btnCalendar.setTargetDate(date);
        txtDate.setText(new java.sql.Date(date.getTime()).toString());
    }
}
