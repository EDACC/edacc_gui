/*
 * EDACCFilter.java
 *
 * Created on 12.10.2010, 00:44:27
 */
package edacc.filter;

import java.awt.GridBagConstraints;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowFilter.Entry;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.jdesktop.application.Action;

/**
 *
 * @author simon
 */
public class Filter extends javax.swing.JDialog {

    private JTable table;
    private TableRowSorter<? extends TableModel> rowSorter;
    private RowFilter<Object, Object> rowFilter;
    private HashMap<Integer, FilterInterface> colFilter;

    /** Creates new form EDACCFilter */
    public Filter(java.awt.Frame parent, boolean modal, JTable table) {
        super(parent, modal);
        initComponents();
        if (!(table.getRowSorter() instanceof TableRowSorter)) {
            throw new IllegalArgumentException("Expected TableRowSorter.");
        }
        this.table = table;
        rowSorter = (TableRowSorter<? extends TableModel>) table.getRowSorter();
        rowFilter = new RowFilter<Object, Object>() {

            @Override
            public boolean include(Entry<? extends Object, ? extends Object> entry) {
                return Filter.this.include(entry);
            }
        };
        rowSorter.setRowFilter(rowFilter);
        colFilter = new HashMap<Integer, FilterInterface>();
    }

    public boolean include(Entry<? extends Object, ? extends Object> entry) {
        for (int i = 0; i < table.getModel().getColumnCount(); i++) {
            if (colFilter.containsKey(i)) {
                if (!colFilter.get(i).include(table.getModel().getValueAt((Integer) entry.getIdentifier(), i))) {
                    return false;
                }
            }
        }
        return true;
    }

    public void clearFilters() {
    }

    public boolean hasFiltersApplied() {
        boolean res = false;
        for (FilterInterface filter : colFilter.values()) {
            res |= filter.hasFiltersApplied();
        }
        return res;
    }

    protected void updateLayout() {
        GridBagConstraints c = new GridBagConstraints();
        pnlFilter.removeAll();
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipadx = 2;
        c.ipady = 2;
        for (int i = 0; i < table.getModel().getColumnCount(); i++) {
            //int k = table.convertColumnIndexToModel(i);
             c.gridx = 0;
            if (colFilter.containsKey(i)) {
                c.weightx = .1;
                pnlFilter.add(new JLabel(table.getModel().getColumnName(i) + ": "), c);
                c.gridx = 1;
                c.weightx = 1000;
                pnlFilter.add((JPanel) colFilter.get(i), c);
                c.gridy++;
                continue;
            }
           
            if (BooleanFilter.accept(table.getModel().getColumnClass(i))) {
                c.weightx = .1;
                pnlFilter.add(new JLabel(table.getModel().getColumnName(i) + ": "), c);
                c.gridx = 1;
                c.weightx = 1000;
                BooleanFilter filter = new BooleanFilter(table.getModel().getColumnName(i));
                pnlFilter.add(filter, c);
                c.gridy++;
                colFilter.put(i, filter);
            }

            if (NumberFilter.accept(table.getModel().getColumnClass(i))) {
                c.weightx = .1;
                pnlFilter.add(new JLabel(table.getModel().getColumnName(i) + ": "), c);
                c.gridx = 1;
                c.weightx = 1000;
                NumberFilter filter = new NumberFilter(table.getModel().getColumnName(i));
                pnlFilter.add(filter, c);
                c.gridy++;
                colFilter.put(i, filter);
            }


            if (StringFilter.accept(table.getModel().getColumnClass(i))) {
                c.weightx = .1;
                pnlFilter.add(new JLabel(table.getModel().getColumnName(i) + ": "), c);
                c.gridx = 1;
                c.weightx = 1000;
                StringFilter filter = new StringFilter(table.getModel().getColumnName(i));
                pnlFilter.add(filter, c);
                c.gridy++;
                colFilter.put(i, filter);
            }
        }
        this.pack();
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            updateLayout();
        }
        super.setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFilter = new javax.swing.JPanel();
        btnApply = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(Filter.class);
        pnlFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("pnlFilter.border.title"))); // NOI18N
        pnlFilter.setName("pnlFilter"); // NOI18N
        pnlFilter.setLayout(new java.awt.GridBagLayout());

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getActionMap(Filter.class, this);
        btnApply.setAction(actionMap.get("btnApply")); // NOI18N
        btnApply.setText(resourceMap.getString("btnApply.text")); // NOI18N
        btnApply.setName("btnApply"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(331, Short.MAX_VALUE)
                .addComponent(btnApply)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void btnApply() {
        this.setVisible(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JPanel pnlFilter;
    // End of variables declaration//GEN-END:variables
}
