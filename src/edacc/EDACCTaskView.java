/*
 * EDACCTaskView.java
 *
 * Created on 19.04.2010, 18:07:20
 */
package edacc;

import edacc.model.Tasks;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import org.jdesktop.application.Action;

/**
 *
 * @author simon
 */
public class EDACCTaskView extends javax.swing.JDialog {

    private Tasks task;
    private GridBagLayout subTaskLayout;
    private GridBagConstraints subTaskConstraints;
    private HashMap<Integer, SubTaskPanel> subTaskPanels;
    private int currentSubTaskId;
    private int maxSubTasks;
    private Thread updateSubTasks;

    /** Creates new form EDACCTaskView */
    public EDACCTaskView(java.awt.Frame parent, boolean modal, Tasks task) {
        super(parent, modal);
        initComponents();
        updateSubTasks = null;

        this.task = task;
        currentSubTaskId = 0;
        maxSubTasks = 0;
        btnCancel.setVisible(false);
        progressBar.setMaximum(10000);
        progressBar.setIndeterminate(true);

        subTaskLayout = new GridBagLayout();
        subTaskConstraints = new GridBagConstraints();
        subTaskConstraints.gridx = 1;
        subTaskConstraints.gridy = 1;
        subTaskConstraints.weightx = 0.5;
        subTaskConstraints.weighty = 1;
        subTaskConstraints.fill = GridBagConstraints.HORIZONTAL;
        subTaskConstraints.anchor = GridBagConstraints.PAGE_START;
        pnlSubTasks.setLayout(subTaskLayout);
        pnlSubTasks.setSize(this.getWidth(), 0);
        this.pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        lblMessage = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        lblOperationName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnlSubTasks = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getResourceMap(EDACCTaskView.class);
        lblMessage.setText(resourceMap.getString("lblMessage.text")); // NOI18N
        lblMessage.setMaximumSize(new java.awt.Dimension(32767, 14));
        lblMessage.setName("lblMessage"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(edacc.EDACCApp.class).getContext().getActionMap(EDACCTaskView.class, this);
        btnCancel.setAction(actionMap.get("btnCancel")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setToolTipText(resourceMap.getString("btnCancel.toolTipText")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N

        lblOperationName.setText(resourceMap.getString("lblOperationName.text")); // NOI18N
        lblOperationName.setMaximumSize(new java.awt.Dimension(32767, 14));
        lblOperationName.setName("lblOperationName"); // NOI18N

        jPanel1.setMinimumSize(new java.awt.Dimension(410, 14));
        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        pnlSubTasks.setName("pnlSubTasks"); // NOI18N

        javax.swing.GroupLayout pnlSubTasksLayout = new javax.swing.GroupLayout(pnlSubTasks);
        pnlSubTasks.setLayout(pnlSubTasksLayout);
        pnlSubTasksLayout.setHorizontalGroup(
            pnlSubTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        pnlSubTasksLayout.setVerticalGroup(
            pnlSubTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlSubTasks, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(lblOperationName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(335, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblOperationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSubTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblOperationName;
    private javax.swing.JPanel pnlSubTasks;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    public void setMessage(final String description) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                lblMessage.setText(description);
                EDACCTaskView.this.pack();
            }
        });

    }

    public void setOperationName(final String name) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                lblOperationName.setText(name);
                EDACCTaskView.this.pack();
            }
        });

    }

    public void setProgress(final double progress) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (progress == 0.) {
                    progressBar.setIndeterminate(true);
                } else {
                    if (progressBar.isIndeterminate()) {
                        progressBar.setIndeterminate(false);
                    }
                    progressBar.setValue((int) (progress * 100));
                }

            }
        });
    }

    private void updateSubTaskConstraints() {
        subTaskConstraints.gridy = 1;
        subTaskConstraints.weighty = 100;
        for (Component c : pnlSubTasks.getComponents()) {
            subTaskLayout.setConstraints(c, subTaskConstraints);
            subTaskConstraints.gridy++;
            subTaskConstraints.weighty *= 100;
        }
    }

    public synchronized Integer getSubTaskId() {
        if (subTaskPanels == null) {
            subTaskPanels = new HashMap<Integer, SubTaskPanel>();
        }
        final SubTaskPanel panel = new SubTaskPanel();
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                pnlSubTasks.add(panel, subTaskConstraints);
                updateSubTaskConstraints();
                EDACCTaskView.this.pack();
                if (pnlSubTasks.getComponentCount() > maxSubTasks) {
                    maxSubTasks = pnlSubTasks.getComponentCount();
                }
                pnlSubTasks.setPreferredSize(new Dimension(pnlSubTasks.getPreferredSize().width, panel.getPreferredSize().height * maxSubTasks));
            }
        });

        subTaskPanels.put(++currentSubTaskId, panel);
        return currentSubTaskId;
    }

    public synchronized void subTaskFinished(int subTaskId) {
        final SubTaskPanel panel = subTaskPanels.get(subTaskId);
        if (panel != null) {
            subTaskPanels.remove(subTaskId);
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    //  pnlSubTasks.setPreferredSize(new Dimension(pnlSubTasks.getWidth(), pnlSubTasks.getHeight()));
                    pnlSubTasks.remove(panel);

                    // this operation is needed to update the GUI if it was the last subtask and no new
                    // tasks will be created. We sleep some time before repainting because it will
                    // flicker otherwise


                    if (updateSubTasks == null || !updateSubTasks.isAlive()) {
                        updateSubTasks = new Thread(new Runnable() {

                            @Override
                            public void run() {
                                try {
                                    Thread.sleep(150);
                                    SwingUtilities.invokeAndWait(new Runnable() {

                                        @Override
                                        public void run() {
                                            pnlSubTasks.invalidate();
                                            pnlSubTasks.revalidate();
                                            pnlSubTasks.repaint();
                                        }
                                    });

                                } catch (Exception ex) {
                                }
                            }
                        });
                        updateSubTasks.start();
                    }
                    updateSubTaskConstraints();
                    EDACCTaskView.this.pack();
                }
            });

        }
    }

    public void setProgress(final int subTaskId, final double progress) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                SubTaskPanel panel = subTaskPanels.get(subTaskId);
                if (panel == null) {
                    return;
                }
                if (progress == 0.) {
                    panel.progressBar.setIndeterminate(true);
                } else {
                    if (panel.progressBar.isIndeterminate()) {
                        panel.progressBar.setIndeterminate(false);
                    }
                    panel.progressBar.setValue((int) (progress * 100));
                }
            }
        });
    }

    public void setMessage(final int subTaskId, final String message) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                SubTaskPanel panel = subTaskPanels.get(subTaskId);
                if (panel == null) {
                    return;
                }
                panel.label.setText(message);

            }
        });
    }

    public void setCancelable(final boolean cancelable) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                if (cancelable) {
                    btnCancel.setVisible(true);
                } else {
                    btnCancel.setVisible(false);
                }
                EDACCTaskView.this.pack();
            }
        });

    }

    @Action
    public void btnCancel() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                btnCancel.setEnabled(false);
                EDACCTaskView.this.pack();
                task.cancel(false);
            }
        });
    }

    private class SubTaskPanel extends JPanel {

        private GridBagLayout layout;
        private GridBagConstraints constraints;
        private JProgressBar progressBar;
        private JLabel label;

        public SubTaskPanel() {
            super();
            layout = new GridBagLayout();
            this.setLayout(layout);
            constraints = new GridBagConstraints();
            label = new JLabel("");
            progressBar = new JProgressBar();
            progressBar.setIndeterminate(true);
            progressBar.setMaximum(10000);
            constraints.gridx = 1;
            constraints.weightx = 0.01;
            constraints.insets = new Insets(0, 5, 0, 0);
            constraints.gridy = 1;
            constraints.anchor = GridBagConstraints.NORTHWEST;

            this.add(label, constraints);
            constraints.gridx = 2;
            constraints.weightx = 1000.;
            constraints.fill = GridBagConstraints.HORIZONTAL;
            this.add(progressBar, constraints);
        }
    }
}
